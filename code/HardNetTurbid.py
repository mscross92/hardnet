#!/usr/bin/python2 utt
# -*- coding: utf-8 -*-
"""
This is HardNet local patch descriptor. The training code is based on PyTorch TFeat implementation
https://github.com/edgarriba/examples/tree/master/triplet
by Edgar Riba.

If you use this code, please cite
@article{HardNet2017,
 author = {Anastasiya Mishchuk, Dmytro Mishkin, Filip Radenovic, Jiri Matas},
    title = "{Working hard to know your neighbor's margins:Local descriptor learning loss}",
     year = 2017}
(c) 2017 by Anastasiia Mishchuk, Dmytro Mishkin
"""
# 5224 milk, 698 db

from __future__ import division, print_function
import sys
from copy import deepcopy
import argparse
import torch
import torch.nn.init
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
from torch.autograd import Variable
import torch.backends.cudnn as cudnn
import os
from tqdm import tqdm
import numpy as np
import random
import cv2
import PIL
import math
import copy
from EvalMetrics import ErrorRateAt95Recall#, ErrorRateFDRAt95Recall, convertFDR2FPR, convertFPR2FDR
from Losses import loss_HardNet, loss_random_sampling, loss_L2Net, global_orthogonal_regularization, loss_semi_hard
from W1BS import w1bs_extract_descs_and_save
from Utils import L2Norm, cv2_scale, np_reshape
from Utils import str2bool
import torch.nn as nn
import torch.utils.data as data

import matplotlib.pyplot as plt
import seaborn as sns

# import faiss


class CorrelationPenaltyLoss(nn.Module):
    def __init__(self):
        super(CorrelationPenaltyLoss, self).__init__()

    def forward(self, input):
        mean1 = torch.mean(input, dim=0)
        zeroed = input - mean1.expand_as(input)
        cor_mat = torch.bmm(torch.t(zeroed).unsqueeze(0), zeroed.unsqueeze(0)).squeeze(0)
        d = torch.diag(torch.diag(cor_mat))
        no_diag = cor_mat - d
        d_sq = no_diag * no_diag
        return torch.sqrt(d_sq.sum()) / input.size(0)


# Training settings
parser = argparse.ArgumentParser(description='PyTorch HardNet')
# Model options

parser.add_argument('--w1bsroot', type=str,
                    default='data/sets/wxbs-descriptors-benchmark/code/',
                    help='path to dataset')
parser.add_argument('--hpatches-split', type=str,
                    default='data/sets/',
                    help='path to HPatches split generated by HPatchesDatasetCreator')
parser.add_argument('--dataroot', type=str,
                    default='data/sets/',
                    help='path to Brown datasets for testing')
parser.add_argument('--enable-logging', type=str2bool, default=False,
                    help='output to tensorlogger')
parser.add_argument('--log-dir', default='data/logs/',
                    help='folder to output log')
parser.add_argument('--model-dir', default='data/models/',
                    help='folder to output model checkpoints')
parser.add_argument('--experiment-name', default='/multiple_datasets_all/',
                    help='experiment path')
parser.add_argument('--training-set', default='turbid_mixed',
                    help='Other options: notredame, yosemite')
parser.add_argument('--loss', default='triplet_margin',
                    help='Other options: softmax, contrastive')
parser.add_argument('--batch-reduce', default='min',
                    help='Other options: average, random, random_global, L2Net')
parser.add_argument('--num-workers', default=1, type=int,
                    help='Number of workers to be created')
parser.add_argument('--pin-memory', type=bool, default=True,
                    help='')
parser.add_argument('--decor', type=str2bool, default=False,
                    help='L2Net decorrelation penalty')
parser.add_argument('--anchorave', type=str2bool, default=False,
                    help='anchorave')
parser.add_argument('--imageSize', type=int, default=32,
                    help='the height / width of the input image to network')
parser.add_argument('--mean-image', type=float, default=0.443728476019,
                    help='mean of train dataset for normalization')
parser.add_argument('--std-image', type=float, default=0.20197947209,
                    help='std of train dataset for normalization')
parser.add_argument('--resume', default='', type=str, metavar='PATH',
                    help='path to latest checkpoint (default: none)')
parser.add_argument('--start-epoch', default=0, type=int, metavar='N',
                    help='manual epoch number (useful on restarts)')
parser.add_argument('--epochs', type=int, default=10, metavar='E',
                    help='number of epochs to train (default: 10)')
parser.add_argument('--anchorswap', type=bool, default=True,
                    help='turns on anchor swap')
parser.add_argument('--batch-size', type=int, default=512, metavar='BS',
                    help='input batch size for training (default: 1024)')
parser.add_argument('--test-batch-size', type=int, default=256, metavar='BST',
                    help='input batch size for testing (default: 1024)')
parser.add_argument('--n-triplets', type=int, default=250000, metavar='N',
                    help='how many triplets will generate from the dataset')
parser.add_argument('--margin', type=float, default=1.0, metavar='MARGIN',
                    help='the margin value for the triplet loss function (default: 1.0')
parser.add_argument('--gor', type=str2bool, default=False,
                    help='use gor')
parser.add_argument('--alpha', type=float, default=1.0, metavar='ALPHA',
                    help='gor parameter')
parser.add_argument('--act-decay', type=float, default=0,
                    help='activity L2 decay, default 0')
parser.add_argument('--lr', type=float, default=10.0, metavar='LR',
                    help='learning rate (default: 10.0)')
parser.add_argument('--fliprot', type=str2bool, default=False,
                    help='turns on flip and 90deg rotation augmentation')
parser.add_argument('--augmentation', type=str2bool, default=False,
                    help='turns on shift and small scale rotation augmentation')
parser.add_argument('--lr-decay', default=1e-6, type=float, metavar='LRD',
                    help='learning rate decay ratio (default: 1e-6')
parser.add_argument('--wd', default=1e-4, type=float,
                    metavar='W', help='weight decay (default: 1e-4)')
parser.add_argument('--optimizer', default='sgd', type=str,
                    metavar='OPT', help='The optimizer to use (default: SGD)')
parser.add_argument('--batch_hard', type=int, default=0, metavar='HM',
                    help='triplet mining strategy')
parser.add_argument('--valset', type=int, default=0, metavar='VAL',
                    help='index of validation set to use')
# Device options
parser.add_argument('--no-cuda', action='store_true', default=False,
                    help='enables CUDA training')
parser.add_argument('--gpu-id', default='0', type=str,
                    help='id(s) for CUDA_VISIBLE_DEVICES')
parser.add_argument('--seed', type=int, default=0, metavar='S',
                    help='random seed (default: 0)')
parser.add_argument('--log-interval', type=int, default=10, metavar='LI',
                    help='how many batches to wait before logging training status')

args = parser.parse_args()

suffix = '{}_{}'.format(args.training_set, args.batch_reduce)

if args.gor:
    suffix = suffix + '_gor_alpha{:1.1f}'.format(args.alpha)
if args.anchorswap:
    suffix = suffix + '_as'
if args.anchorave:
    suffix = suffix + '_av'

triplet_flag = (args.batch_reduce == 'random_global') or args.gor
# triplet_flag = True

dataset_names = ['turbid_milk', 'turbid_deepblue','turbid_mixed']

TEST_ON_W1BS = False
# check if path to w1bs dataset testing module exists
if os.path.isdir(args.w1bsroot):
    sys.path.insert(0, args.w1bsroot)
    import utils.w1bs as w1bs

    TEST_ON_W1BS = True

# set the device to use by setting CUDA_VISIBLE_DEVICES env variable in
# order to prevent any memory allocation on unused GPUs
os.environ['CUDA_VISIBLE_DEVICES'] = '0'

args.cuda = not args.no_cuda and torch.cuda.is_available()

if args.cuda:
    cudnn.benchmark = True
    torch.cuda.manual_seed_all(args.seed)

# create loggin directory
if not os.path.exists(args.log_dir):
    os.makedirs(args.log_dir)

# set random seeds
torch.manual_seed(args.seed)
np.random.seed(args.seed)

class TurbidDatasetsLoader(data.Dataset):

    def __init__(self, datasets_path, train = True, transform = None, batch_size = None, n_triplets = 5000000, fps = None, val_feat_idxs = None, alpha_margin = 1.0, fliprot = False, *arg, **kw):
        super(TurbidDatasetsLoader, self).__init__()

        # load turbid images
        datasets = torch.load(datasets_path)
        data, labels = datasets[0], datasets[1]
        del datasets
        
        self.data, self.labels = data, labels

        self.fps = fps
        self.n_features = len(fps)
        self.val_feat_idxs = val_feat_idxs
        del fps, val_feat_idxs

        self.train = train
        self.n_triplets = n_triplets
        self.batch_size = batch_size
        self.alpha_margin = alpha_margin
        self.fliprot = fliprot

        self.triplets = self.generate_triplets(self.labels, self.n_triplets, self.batch_size, self.val_feat_idxs, self.n_features)
        
        
    @staticmethod
    def generate_triplets(labels, num_triplets, batch_size, val_feats, n_feats):
        def create_indices(_labels,_n_feats,_val_feats):
            inds = dict()
            for ind in range(_n_feats):
                if ind not in _val_feats:
                    if ind not in inds:
                        inds[ind] = []
                    for idx in range(max(_labels)+1):
                        inds[ind].append(idx)
            return inds

        triplets = []
        indices = create_indices(labels.numpy(),n_feats,val_feats)

        # add only unique indices in batch
        already_idxs = set()

        for x in tqdm(range(num_triplets)):
            if len(already_idxs) >= batch_size:
                already_idxs = set()
            c1 = np.random.randint(0, n_feats)
            while c1 in already_idxs or c1 in val_feats:
                c1 = np.random.randint(0, n_feats)
            already_idxs.add(c1)
            c2 = np.random.randint(0, n_feats)
            while c1 == c2  or c2 in val_feats:
                c2 = np.random.randint(0, n_feats)
            if len(indices[c1]) == 2:  # hack to speed up process
                n1, n2 = 0, 1
            else:
                n1 = np.random.randint(0, len(indices[c1]))
                n2 = np.random.randint(0, len(indices[c1]))
                while n1 == n2:
                    n2 = np.random.randint(0, len(indices[c1]))
            n3 = np.random.randint(0, len(indices[c2]))
            triplets.append([[c1,n1],[c1,n2],[c2,n3]])
            # triplets.append([indices[c1][n1], indices[c1][n2], indices[c2][n3]])
        # print('TRIPLET SHAPE',np.array(triplets).shape)
        return torch.LongTensor(np.array(triplets))



    def __getitem__(self, index):
            def transform_img(img, p):
                (y,x) = p.pt
                s = p.size

                img = img[int(x-0.5*s):int(x-0.5*s)+int(s),int(y-0.5*s):int(y-0.5*s)+int(s)] # extract patch
                # print(img.shape)

                transform = transforms.Compose([
                    transforms.ToPILImage(),
                    transforms.Resize(args.imageSize), # resize patch
                    transforms.ToTensor()])
                
                img = transform(img)

                return img

            t = self.triplets[index]
            (a_idx, a_img) = t[0]
            (p_idx, p_img) = t[1]
            (n_idx, n_img) = t[2]
            a_fps = self.fps[a_idx]
            p_fps = self.fps[p_idx]
            n_fps = self.fps[n_idx]
            # print(a_img, p_img, n_img)

            a_img = self.data[a_img]
            p_img = self.data[p_img]
            n_img = self.data[n_img]

            ptch_a = transform_img(a_img.numpy(),a_fps)
            ptch_p = transform_img(p_img.numpy(),p_fps)
            ptch_n = transform_img(n_img.numpy(),n_fps)

            # horizontal flip with p=0.5
            do_flip = random.random() > 0.5
            if do_flip:
                ptch_a = torch.from_numpy(deepcopy(ptch_a.numpy()[:,:,::-1]))
                ptch_p = torch.from_numpy(deepcopy(ptch_p.numpy()[:,:,::-1]))

            return ptch_a, ptch_p, ptch_n

    def __len__(self):
            # if self.train:
            return self.triplets.size(0)


class HardNet(nn.Module):
    """HardNet model definition
    """

    def __init__(self):
        super(HardNet, self).__init__()
        self.features = nn.Sequential(
            # nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, bias=False),
            # nn.BatchNorm2d(32,affine=False),
            # nn.ReLU(),
            # nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, bias=False),
            # nn.BatchNorm2d(64,affine=False),
            # nn.ReLU(),

            nn.Conv2d(1, 32, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(32, affine=False),
            nn.ReLU(),
            nn.Conv2d(32, 32, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(32, affine=False),
            nn.ReLU(),
            nn.Conv2d(32, 64, kernel_size=3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(64, affine=False),
            nn.ReLU(),
            nn.Conv2d(64, 64, kernel_size=3, padding=1, bias=False),
            # nn.MaxPool2d(2),
            nn.BatchNorm2d(64, affine=False),
            nn.ReLU(),
            nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(128, affine=False),
            nn.ReLU(),
            nn.Conv2d(128, 128, kernel_size=3, padding=1, bias=False),
            # nn.MaxPool2d(2),
            nn.BatchNorm2d(128, affine=False),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Conv2d(128, 128, kernel_size=8, bias=False),
            nn.BatchNorm2d(128, affine=False),
        )

        # self.descr = nn.Sequential(
        #     nn.Linear(64 * 25 * 25, 128),
        #     # nn.Tanh()
        # )

        self.features.apply(weights_init)
        return


    def input_norm(self, x):
        flat = x.view(x.size(0), -1)
        mp = torch.mean(flat, dim=1)
        sp = torch.std(flat, dim=1) + 1e-7
        return (x - mp.unsqueeze(-1).unsqueeze(-1).unsqueeze(-1).expand_as(x)) / sp.unsqueeze(-1).unsqueeze(
            -1).unsqueeze(1).expand_as(x)

    def forward(self, input):
        x_features = self.features(self.input_norm(input))
        x = x_features.view(x_features.size(0), -1)
        # print(x.shape)
        # x = self.descr(x)
        return L2Norm()(x)


def weights_init(m):
    if isinstance(m, nn.Conv2d):
        nn.init.orthogonal_(m.weight.data, gain=0.6)
        try:
            nn.init.constant(m.bias.data, 0.01)
        except:
            pass
    return


def create_loaders(load_random_triplets=False, val_x_dir='', val_set_def_dir='', train_img_dir='', val_set_idx=0,fps=None,val_idxs=None):
    test_dataset_names = copy.copy(dataset_names)
    test_dataset_names.remove(args.training_set)
    kwargs = {'num_workers': args.num_workers, 'pin_memory': args.pin_memory} if args.cuda else {}
    np_reshape32 = lambda x: np.reshape(x, (args.imageSize, args.imageSize, 1))
    # np_reshape29 = lambda x: np.reshape(x, (29, 29, 1))
    transform_test = transforms.Compose([
            transforms.Lambda(np_reshape32),
            transforms.ToPILImage(),
            transforms.Resize(args.imageSize),
            transforms.ToTensor()])
    transform_train = transforms.Compose([
            transforms.Lambda(np_reshape32),
            transforms.ToPILImage(),
            # transforms.RandomRotation(5,PIL.Image.BILINEAR),
            # transforms.RandomResizedCrop(29, scale = (0.9,1.0),ratio = (0.9,1.1)),
            transforms.Resize(args.imageSize),
            transforms.ToTensor()])
    transform = transforms.Compose([
            # transforms.Lambda(cv2_scale),
            # transforms.Lambda(np_reshape),
            # transforms.ToTensor(),
            # transforms.Normalize((args.mean_image,), (args.std_image,))])
            transforms.Lambda(np_reshape32),
            transforms.ToPILImage(),
            # transforms.RandomRotation(15,PIL.Image.BILINEAR),
            # transforms.RandomHorizontalFlip(p=0.5),
            # transforms.ColorJitter(brightness=0.1, contrast=0, saturation=0, hue=0),
            transforms.Resize(args.imageSize),
            transforms.ToTensor()])
    if not args.augmentation:
        transform_train = transform
        transform_test = transform_test

    # train_loader = torch.utils.data.DataLoader(
    #     TotalDatasetsLoader(train=True,
    #                      load_random_triplets=load_random_triplets,
    #                      batch_size=args.batch_size,
    #                      datasets_path=args.hpatches_split+"hpatches_split_a_train.pt",
    #                      fliprot=args.fliprot,
    #                      n_triplets=args.n_triplets,
    #                      name=args.training_set,
    #                      download=True,
    #                      transform=transform_train),
    #     batch_size=args.batch_size,
    #     shuffle=False, **kwargs)

    train_loader = torch.utils.data.DataLoader(
        TurbidDatasetsLoader(train=True,
                         load_random_triplets=load_random_triplets,
                         batch_size=args.batch_size,
                         datasets_path=args.hpatches_split+"turbid_imgs.pt",
                         setdef_path=val_set_def_dir,
                         valset_idx=args.valset,
                         n_triplets=args.n_triplets,
                         name=args.training_set,
                         download=True,
                         fps=fps,
                         val_feat_idxs=val_idxs),
        batch_size=args.batch_size,
        shuffle=False, **kwargs)

    # test_loader = torch.utils.data.DataLoader(
    #     TotalDatasetsLoader(train=False,
    #                      load_random_triplets = False,
    #                      batch_size=512,
    #                      datasets_path=args.hpatches_split+"hpatches_split_a_test.pt",
    #                      fliprot=args.fliprot,
    #                      n_triplets=6980,
    #                      batch_hard=0,
    #                      name="turbid_deepblue",
    #                      download=True,
    #                      transform=transform_test),
    #     batch_size=args.test_batch_size,
    #     shuffle=False, **kwargs)

    return train_loader


def train(train_loader, model, optimizer, epoch, logger, load_triplets=True):
    # switch to train mode
    model.train()
    pbar = tqdm(enumerate(train_loader))
    # print('\n\n',pbar.shape,'\n\n')
    tp, tn = [], []
    for batch_idx, data in pbar:
        # print(batch_idx)
        if load_triplets:
            data_a, data_p, data_n = data
            
            # visualise random triplet for the first batch - TODO: randomly select batch
            # index = np.random.randint(0, data_a.shape[0])
            # if batch_idx == 0:
                # print(data_n[index,0,28,28])
                # plt.figure()
                # plt.subplot(1, 3, 1)
                # plt.imshow((np.array(data_a[index,0,:,:])*255).astype('uint8'), cmap='gray',vmax=255,vmin=0) 
                # plt.gca().set_xticks([])
                # plt.gca().set_yticks([])
                # plt.title('Anchor', fontsize=12)
                # plt.subplot(1,3,2)
                # plt.imshow((np.array(data_p[index,0,:,:])*255).astype('uint8'), cmap='gray',vmax=255,vmin=0) 
                # plt.title('Positive', fontsize=12)
                # plt.gca().set_xticks([])
                # plt.gca().set_yticks([])
                # plt.subplot(1,3,3)
                # plt.imshow((np.array(data_n[index,0,:,:])*255).astype('uint8'), cmap='gray',vmax=255,vmin=0) 
                # plt.title('Negative', fontsize=12)
                # plt.gca().set_xticks([])
                # plt.gca().set_yticks([])
                # savestr = 'epch' + str(epoch) + '_idx' + str(index) + '.png'
                # plt.savefig(savestr, bbox_inches='tight')
                # plt.close()
        else:
            data_a, data_p = data

        if args.cuda:
            data_a, data_p = data_a.cuda(), data_p.cuda()
            data_a, data_p = Variable(data_a), Variable(data_p)
            out_a = model(data_a)
            out_p = model(data_p)

        if load_triplets:
            data_n = data_n.cuda()
            data_n = Variable(data_n)
            out_n = model(data_n)

        vis_id = 99999
        if args.batch_reduce == 'L2Net':
            loss = loss_L2Net(out_a, out_p, anchor_swap=args.anchorswap,
                              margin=args.margin, loss_type=args.loss)
        elif args.batch_reduce == 'random_global':
            loss = loss_random_sampling(out_a, out_p, out_n,
                                        margin=args.margin,
                                        anchor_swap=args.anchorswap,
                                        loss_type=args.loss)
       
        elif args.batch_reduce == 'random_sh':
            if batch_idx==0:
                vis_id = np.random.randint(0, data_a.shape[0])
            loss, n_idx, n_type = loss_semi_hard(out_a, out_p,
                            margin=args.margin,
                            anchor_swap=args.anchorswap,
                            anchor_ave=args.anchorave,
                            batch_reduce=args.batch_reduce,
                            loss_type=args.loss,
                            visualise_idx=vis_id)

        else:
            if batch_idx==0:
                vis_id = np.random.randint(0, data_a.shape[0])
            loss, n_idx,n_type = loss_HardNet(out_a, out_p,
                                margin=args.margin,
                                anchor_swap=args.anchorswap,
                                anchor_ave=args.anchorave,
                                batch_reduce=args.batch_reduce,
                                loss_type=args.loss,
                                visualise_idx=vis_id)
            

        if args.decor:
            loss += CorrelationPenaltyLoss()(out_a)

        if args.gor:
            loss += args.alpha * global_orthogonal_regularization(out_a, out_n)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        adjust_learning_rate(optimizer)
        if batch_idx % args.log_interval == 0:
            pbar.set_description(
                'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                    epoch, batch_idx * len(data_a), len(train_loader.dataset),
                           100. * batch_idx / len(train_loader),
                    loss.item()))
                    # loss.data[0]))
    if (args.enable_logging):
        logger.log_value('loss', loss.item()).step()
    try:
        os.stat('{}{}'.format(args.model_dir, suffix))
    except:
        os.makedirs('{}{}'.format(args.model_dir, suffix))

    torch.save({'epoch': epoch + 1, 'state_dict': model.state_dict()},
               '{}{}/checkpoint_{}.pth'.format(args.model_dir, suffix, epoch))
    
    return loss.item()


def test(model, epoch, logger, logger_test_name, val_data_dir, val_setdef_dir, val_set_idx):

    def get_ptch(fldr,img_idx,ptch_idx,patch_size):
        img_str = fldr + '/' + str(img_idx) + '/' + str(ptch_idx) + '.jpg'        
        ptch = cv2.imread(img_str, 0)
        ptch = cv2.resize(ptch, (patch_size, patch_size))
        ptch = np.array(ptch, dtype=np.uint8)
        return torch.ByteTensor(np.array(ptch, dtype=np.uint8))
        
    # switch to evaluate mode
    model.eval()

    # load features and pairs
    all_pairs = np.loadtxt(val_setdef_dir + '/validation_pairs_set'+str(val_set_idx)+'.txt',delimiter=' ').astype('uint16')
    
    # iterate through pairs: img_idx_A,ptch_idx_A,img_idx_B,ptch_idx_B,pos_flag
    tp, tn = [], []
    for p in all_pairs:

        # get descriptors
        img = get_ptch(val_data_dir,p[0],p[1],args.imageSize)
        img = torch.FloatTensor(np.array(img)).unsqueeze(0).unsqueeze(0)
        if args.cuda:
            img = img.cuda()
        with torch.no_grad():
            img = Variable(img)
            print(img.shape)
            desc_a = model(img)
            desc_a = desc_a.cpu().numpy()
            
        img = get_ptch(val_data_dir,p[2],p[3],args.imageSize)
        img = torch.FloatTensor(np.array(img)).unsqueeze(0).unsqueeze(0)
        if args.cuda:
            img = img.cuda()
        with torch.no_grad():
            desc_b = model(img)
            desc_b = desc_b.cpu().numpy()

        # compute euclidean distance
        d = cv2.norm(desc_a,desc_b,cv2.NORM_L2)

        # store distance
        if p[4]==1:
            tp.append(d)
        else:
            tn.append(d)

    
    ll = []
    ll.extend(np.zeros(len(tp)))
    ll.extend(np.ones(len(tn)))
    ll = np.asarray(ll)

    d_sift = np.append(tn,tp)
    d_sift = np.asarray(d_sift)

    err = ErrorRateAt95Recall(ll,d_sift)
    print('FPR@95 from validation set',val_set_idx,':',err)

    savestr = 'val_set' + str(val_set_idx) + '_hist_epoch' + str(epoch) + '.png'
    plt.figure(figsize=(5, 3))
    plt.hist(tp,bins=20,edgecolor = 'green', linewidth=1, color=(0,0.6,0,0.25))
    plt.hist(tn,bins=20,edgecolor = 'darkred',linewidth=1, color=(1,0,0,0.25))
    plt.savefig(savestr, bbox_inches='tight')
    plt.close()

    return err


def adjust_learning_rate(optimizer):
    """Updates the learning rate given the learning rate decay.
    The routine has been implemented according to the original Lua SGD optimizer
    """
    for group in optimizer.param_groups:
        if 'step' not in group:
            group['step'] = 0.
        else:
            group['step'] += 1.
        group['lr'] = args.lr * (
            1.0 - float(group['step']) * float(args.batch_size) / (args.n_triplets * float(args.epochs)))
        
        # print(args.lr * (1.0 - float(group['step']) * float(args.batch_size) / (args.n_triplets * float(args.epochs))))
    return


def create_optimizer(model, new_lr):
    # setup optimizer
    if args.optimizer == 'sgd':
        optimizer = optim.SGD(model.parameters(), lr=new_lr,
                              momentum=0.9, dampening=0.9,
                              weight_decay=args.wd)
    elif args.optimizer == 'adam':
        optimizer = optim.Adam(model.parameters(), lr=new_lr,
                               weight_decay=args.wd)
    else:
        raise Exception('Not supported optimizer: {0}'.format(args.optimizer))
    return optimizer


def main(train_loader, model, logger, file_logger, val_x_dir, val_set_def_dir, train_img_dir, val_set_idx, fps, val_idxs):
    
    # print the experiment configuration
    print('\nparsed options:\n{}\n'.format(vars(args)))

    # if (args.enable_logging):
    #    file_logger.log_string('logs.txt', '\nparsed options:\n{}\n'.format(vars(args)))

    if args.cuda:
        model.cuda()

    optimizer1 = create_optimizer(model.features, args.lr)

    # optionally resume from a checkpoint
    if args.resume:
        if os.path.isfile(args.resume):
            print('=> loading checkpoint {}'.format(args.resume))
            checkpoint = torch.load(args.resume)
            args.start_epoch = checkpoint['epoch']
            checkpoint = torch.load(args.resume)
            model.load_state_dict(checkpoint['state_dict'])
        else:
            print('=> no checkpoint found at {}'.format(args.resume))
    
    kwargs = {'num_workers': args.num_workers, 'pin_memory': args.pin_memory} if args.cuda else {}

    # get feature points
    # fps_str = train_img_dir + '/features.txt'
    # print(fps_str)
    # fps = []
    # lines = [line.strip() for line in open(fps_str)]
    # for line in lines:
    #     list = line.split(',')
    #     kp = cv2.KeyPoint(x=float(list[0]), y=float(list[1]), _size=float(list[2]), _angle=float(list[3]),
    #                     _response=float(list[4]), _octave=int(list[5]), _class_id=int(list[6]))
    #     if kp.size<12:
    #         kp.size = 12
    #     fps.append(kp)
    # del list

    # val_idxs = np.loadtext(train_img_dir + '/validation_location_idxs_set'+str(val_set_idx)+'.txt',delimiter=',')

    test_fpr95_arr, train_losses_arr = [], []
    start = args.start_epoch
    end = start + args.epochs
    for epoch in range(start, end):

        model.eval()
        
        if  args.batch_hard==0:
            trainDatasetWithHardNegatives = TurbidDatasetsLoader(train=True,
                            load_random_triplets=False,
                            batch_size=args.batch_size,
                            datasets_path=args.hpatches_split+"turbid_imgs.pt",
                            setdef_path=val_set_def_dir,
                            valset_idx=args.valset,
                            n_triplets=args.n_triplets,
                            name=args.training_set,
                            download=True,
                            fps=fps,
                            val_feat_idxs=val_idxs)
            
            train_loader = torch.utils.data.DataLoader(trainDatasetWithHardNegatives,
                                                    batch_size=args.batch_size,
                                                    shuffle=False, **kwargs)
        
        else:
            trainDatasetWithHardNegatives = TurbidDatasetsLoader(train=True,
                         load_random_triplets=False,
                         batch_size=args.batch_size,
                         datasets_path=args.hpatches_split+"turbid_imgs.pt",
                         setdef_path=val_set_def_dir,
                         valset_idx=args.valset,
                         n_triplets=args.n_triplets,
                         name=args.training_set,
                         download=True,
                         fps=fps,
                         val_feat_idxs=val_idxs)
            train_loader = torch.utils.data.DataLoader(trainDatasetWithHardNegatives,
                                                    batch_size=args.batch_size,
                                                    shuffle=False, **kwargs)



        # train_loss_epch = train(train_loader, model, optimizer1, epoch, logger)
        # train_losses_arr.append(train_loss_epch)

        fpr95_epch = test(model, epoch, logger, "a_test_log",val_x_dir, val_set_def_dir,args.valset)
        test_fpr95_arr.append(fpr95_epch)

        # # iterate over test loaders and test results
        # #train_loader, test_loaders2 = create_loaders(load_random_triplets=triplet_flag)
        # train(train_loader, model, optimizer1, epoch, logger, triplet_flag)

        # # visualise 
        # test on deepblue set
        # test_loss_epch, fpr95_epch = test(test_loader, model, epoch, logger,"a_test_log", xt, yt, xv, xv_ref, yv_p, yv_i, xts, xts_ref, yts_p, yts_i)
        # test_losses_arr.append(test_loss_epch)
        # test_fpr95_arr.append(fpr95_epch)

        # if TEST_ON_W1BS:
        #     # print(weights_path)
        #     patch_images = w1bs.get_list_of_patch_images(
        #         DATASET_DIR=args.w1bsroot.replace('/code', '/data/W1BS'))
        #     desc_name = 'curr_desc'  # + str(random.randint(0,100))

        #     DESCS_DIR = LOG_DIR + '/temp_descs/'  # args.w1bsroot.replace('/code', "/data/out_descriptors")
        #     OUT_DIR = DESCS_DIR.replace('/temp_descs/', "/out_graphs/")

        #     for img_fname in patch_images:
        #         w1bs_extract_descs_and_save(img_fname, model, desc_name, cuda=args.cuda,
        #                                     mean_img=args.mean_image,
        #                                     std_img=args.std_image, out_dir=DESCS_DIR)

        #     force_rewrite_list = [desc_name]
        #     w1bs.match_descriptors_and_save_results(DESC_DIR=DESCS_DIR, do_rewrite=True,
        #                                             dist_dict={},
        #                                             force_rewrite_list=force_rewrite_list)
        #     if (args.enable_logging):
        #         w1bs.draw_and_save_plots_with_loggers(DESC_DIR=DESCS_DIR, OUT_DIR=OUT_DIR,
        #                                               methods=["SNN_ratio"],
        #                                               descs_to_draw=[desc_name],
        #                                               logger=file_logger,
        #                                               tensor_logger=logger)
        #     else:
        #         w1bs.draw_and_save_plots(DESC_DIR=DESCS_DIR, OUT_DIR=OUT_DIR,
        #                                  methods=["SNN_ratio"],
        #                                  descs_to_draw=[desc_name])

    # plot losses
    epchs = range(1, len(test_fpr95_arr) + 1)
    plt.figure(figsize=(7,4))
    plt.plot(epchs, test_fpr95_arr)
    plt.xlabel('Epochs')
    plt.ylabel('FPR95')
    savestr = 'frp95_plot.png'
    plt.savefig(savestr, bbox_inches='tight')
    plt.close()

    # plt.figure(figsize=(7,4))
    # plt.plot(epchs, train_losses_arr, label='Milk subset (train)')
    # plt.plot(epchs, test_losses_arr, label='DeepBlue subset (validation)')
    # plt.xlabel('Epochs')
    # plt.ylabel('Loss')
    # plt.legend()
    # savestr = 'losses_plot.png'
    # plt.savefig(savestr, bbox_inches='tight')
    # plt.close()

    # # save fpr data to file
    # savestr = 'fpr95_test_data.txt'
    # np.savetxt(savestr, test_fpr95_arr, delimiter=',') 


    # model.eval()
    
    # # load all patches
    # inc_list = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
    # patch_fldr = '/content/hardnet/data/sets/turbid/test_data/validation_all_' + str(args.imageSize)
    # xv, label_indices, yv_p, yv_i = load_patchDataset_allval2(patch_fldr,inc_list,330)
    # xv = torch.FloatTensor(np.array(xv)).unsqueeze(1)

    # # load comparisons
    # fl = '/content/hardnet/data/sets/turbid/test_data/comparisons.txt'    
    # comparisons = np.loadtxt(fl,delimiter=',').astype('uint16')

    # # compute all descriptors
    # if args.cuda:
    #     xv = xv.cuda()
    # with torch.no_grad():
    #     xv = Variable(xv)
    #     # desc_xv = model(xv)
    #     splts = torch.chunk(xv, args.imageSize)
    #     outputs = []
    #     for s in splts:
    #         desc = model(s)
    #         outputs.append(desc)
    #     desc_xv = torch.cat(outputs)
    #     print(desc_xv.shape)

    # tn, tp, = [], []

    # # for each comparison
    # for p in comparisons:
    #     pos_flag = p[4]
    #     d_idx_a = int(label_indices[p[1],p[0]-2])
    #     desc_a = desc_xv[d_idx_a].cpu().numpy()

    #     d_idx_b = int(label_indices[p[3],p[2]-2])
    #     desc_b = desc_xv[d_idx_b].cpu().numpy()

    #     # compute euclidean distance
    #     d = cv2.norm(desc_a,desc_b,cv2.NORM_L2)

    #     if pos_flag == 1:
    #         tp.append(d)
    #     else:
    #         tn.append(d)

    # # save to files
    # np.savetxt('tp.txt', tp, delimiter=',') 
    # np.savetxt('tn.txt', tn, delimiter=',') 

    # # compare positives for first 100 patches
    # n_tests = 200 # limit to only include milk patches
    # distances = np.zeros((n_tests,len(inc_list)))
    # for ii in range(n_tests):
    #     ref_idx = int(label_indices[ii,0])
    #     ref_desc = desc_xv[ref_idx].cpu().numpy()

    #     for jj in range(len(inc_list)):
    #         p_idx = int(label_indices[ii,jj])
    #         desc = desc_xv[p_idx].cpu().numpy()
    #         d = cv2.norm(ref_desc,desc,cv2.NORM_L2)
    #         distances[ii,jj] = d

    # np.savetxt('positive_dists.txt', distances, delimiter=',')

    # distances = np.zeros((717,len(inc_list)))
    # # iterate through patches
    # for ii in range(717):
    #     d_idx_a = int(label_indices[ii,0]) # reference patch for first image
    #     desc_a = desc_xv[d_idx_a].cpu().numpy()

    #     # iterate through images
    #     for jj in range(len(inc_list)):
    #         d_idx_b = int(label_indices[ii,jj])
    #         desc_b = desc_xv[d_idx_b].cpu().numpy()

    #         # compute euclidean distance
    #         d = cv2.norm(desc_a,desc_b,cv2.NORM_L2)
    #         distances[ii,jj] = d

    # np.savetxt('positive_dists.txt', distances, delimiter=',') 

    torch.cuda.empty_cache()



if __name__ == '__main__':
    LOG_DIR = args.log_dir
    if not os.path.isdir(LOG_DIR):
        os.makedirs(LOG_DIR)
    LOG_DIR = os.path.join(args.log_dir, suffix)
    DESCS_DIR = os.path.join(LOG_DIR, 'temp_descs')
    if TEST_ON_W1BS:
        if not os.path.isdir(DESCS_DIR):
            os.makedirs(DESCS_DIR)
    logger, file_logger = None, None
    model = HardNet()
    # model_weights = '/content/hardnet/pretrained/checkpoint_9.pth'
    # checkpoint = torch.load(model_weights)
    # model.load_state_dict(checkpoint['state_dict'])

    if (args.enable_logging):
        from Loggers import Logger, FileLogger
        logger = Logger(LOG_DIR)
        # file_logger = FileLogger(./log/+suffix)
    # train_loader, test_loader = create_loaders(load_random_triplets=triplet_flag)
    # main(train_loader, test_loader, model, logger, file_logger)

    val_x_dir = './data/sets/turbid/test_set'
    val_set_def_dir = val_x_dir
    train_img_dir = './data/sets/turbid/milk_imgs'

    fps_str = train_img_dir + '/features.txt'
    print(fps_str)
    fps = []
    lines = [line.strip() for line in open(fps_str)]
    for line in lines:
        list = line.split(',')
        kp = cv2.KeyPoint(x=float(list[0]), y=float(list[1]), _size=float(list[2]), _angle=float(list[3]),
                        _response=float(list[4]), _octave=int(list[5]), _class_id=int(list[6]))
        if kp.size<12:
            kp.size = 12
        fps.append(kp)
    del list

    val_idxs = np.loadtxt(train_img_dir + '/validation_location_idxs_set'+str(args.valset)+'.txt',delimiter=',')
    train_loader = create_loaders(load_random_triplets=False, val_x_dir=val_x_dir, val_set_def_dir=val_set_def_dir, train_img_dir=train_img_dir, val_set_idx=args.valset,fps=fps,val_idxs=val_idxs)
    # train_loader = create_loaders(load_random_triplets=triplet_flag, val_x_dir, val_set_def_dir, train_img_dir, args.valset. fps, val_idxs)
    main(train_loader, model, logger, file_logger, val_x_dir, val_set_def_dir, train_img_dir, args.valset, fps, val_idxs)