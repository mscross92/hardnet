#!/usr/bin/python2 utt
# -*- coding: utf-8 -*-
"""
This is HardNet local patch descriptor. The training code is based on PyTorch TFeat implementation
https://github.com/edgarriba/examples/tree/master/triplet
by Edgar Riba.

If you use this code, please cite
@article{HardNet2017,
 author = {Anastasiya Mishchuk, Dmytro Mishkin, Filip Radenovic, Jiri Matas},
    title = "{Working hard to know your neighbor's margins:Local descriptor learning loss}",
     year = 2017}
(c) 2017 by Anastasiia Mishchuk, Dmytro Mishkin
"""
# 5224 milk, 698 db

from __future__ import division, print_function
import sys
from copy import deepcopy
import argparse
import torch
import torch.nn.init
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
from torch.autograd import Variable
import torch.backends.cudnn as cudnn
import os
from tqdm import tqdm
import numpy as np
import random
import cv2
import PIL
import math
import copy
from EvalMetrics import ErrorRateAt95Recall#, ErrorRateFDRAt95Recall, convertFDR2FPR, convertFPR2FDR
from Losses import loss_HardNet, loss_random_sampling, loss_L2Net, global_orthogonal_regularization, loss_semi_hard
from W1BS import w1bs_extract_descs_and_save
from Utils import L2Norm, cv2_scale, np_reshape
from Utils import str2bool
import torch.nn as nn
import torch.utils.data as data

import matplotlib.pyplot as plt
import seaborn as sns

# import faiss


class CorrelationPenaltyLoss(nn.Module):
    def __init__(self):
        super(CorrelationPenaltyLoss, self).__init__()

    def forward(self, input):
        mean1 = torch.mean(input, dim=0)
        zeroed = input - mean1.expand_as(input)
        cor_mat = torch.bmm(torch.t(zeroed).unsqueeze(0), zeroed.unsqueeze(0)).squeeze(0)
        d = torch.diag(torch.diag(cor_mat))
        no_diag = cor_mat - d
        d_sq = no_diag * no_diag
        return torch.sqrt(d_sq.sum()) / input.size(0)


# Training settings
parser = argparse.ArgumentParser(description='PyTorch HardNet')
# Model options

parser.add_argument('--w1bsroot', type=str,
                    default='data/sets/wxbs-descriptors-benchmark/code/',
                    help='path to dataset')
parser.add_argument('--hpatches-split', type=str,
                    default='data/sets/',
                    help='path to HPatches split generated by HPatchesDatasetCreator')
parser.add_argument('--dataroot', type=str,
                    default='data/sets/',
                    help='path to Brown datasets for testing')
parser.add_argument('--enable-logging', type=str2bool, default=False,
                    help='output to tensorlogger')
parser.add_argument('--log-dir', default='data/logs/',
                    help='folder to output log')
parser.add_argument('--model-dir', default='data/models/',
                    help='folder to output model checkpoints')
parser.add_argument('--experiment-name', default='/multiple_datasets_all/',
                    help='experiment path')
parser.add_argument('--training-set', default='turbid_milk',
                    help='Other options: notredame, yosemite')
parser.add_argument('--loss', default='triplet_margin',
                    help='Other options: softmax, contrastive')
parser.add_argument('--batch-reduce', default='min',
                    help='Other options: average, random, random_global, L2Net')
parser.add_argument('--num-workers', default=1, type=int,
                    help='Number of workers to be created')
parser.add_argument('--pin-memory', type=bool, default=True,
                    help='')
parser.add_argument('--decor', type=str2bool, default=False,
                    help='L2Net decorrelation penalty')
parser.add_argument('--anchorave', type=str2bool, default=False,
                    help='anchorave')
parser.add_argument('--imageSize', type=int, default=32,
                    help='the height / width of the input image to network')
parser.add_argument('--mean-image', type=float, default=0.443728476019,
                    help='mean of train dataset for normalization')
parser.add_argument('--std-image', type=float, default=0.20197947209,
                    help='std of train dataset for normalization')
parser.add_argument('--resume', default='', type=str, metavar='PATH',
                    help='path to latest checkpoint (default: none)')
parser.add_argument('--start-epoch', default=0, type=int, metavar='N',
                    help='manual epoch number (useful on restarts)')
parser.add_argument('--epochs', type=int, default=10, metavar='E',
                    help='number of epochs to train (default: 10)')
parser.add_argument('--anchorswap', type=bool, default=True,
                    help='turns on anchor swap')
parser.add_argument('--batch-size', type=int, default=512, metavar='BS',
                    help='input batch size for training (default: 1024)')
parser.add_argument('--test-batch-size', type=int, default=256, metavar='BST',
                    help='input batch size for testing (default: 1024)')
parser.add_argument('--n-triplets', type=int, default=180000, metavar='N',
                    help='how many triplets will generate from the dataset')
parser.add_argument('--margin', type=float, default=1.0, metavar='MARGIN',
                    help='the margin value for the triplet loss function (default: 1.0')
parser.add_argument('--gor', type=str2bool, default=False,
                    help='use gor')
parser.add_argument('--alpha', type=float, default=1.0, metavar='ALPHA',
                    help='gor parameter')
parser.add_argument('--act-decay', type=float, default=0,
                    help='activity L2 decay, default 0')
parser.add_argument('--lr', type=float, default=10.0, metavar='LR',
                    help='learning rate (default: 10.0)')
parser.add_argument('--fliprot', type=str2bool, default=False,
                    help='turns on flip and 90deg rotation augmentation')
parser.add_argument('--augmentation', type=str2bool, default=False,
                    help='turns on shift and small scale rotation augmentation')
parser.add_argument('--lr-decay', default=1e-6, type=float, metavar='LRD',
                    help='learning rate decay ratio (default: 1e-6')
parser.add_argument('--wd', default=1e-4, type=float,
                    metavar='W', help='weight decay (default: 1e-4)')
parser.add_argument('--optimizer', default='sgd', type=str,
                    metavar='OPT', help='The optimizer to use (default: SGD)')
parser.add_argument('--batch_hard', type=int, default=0, metavar='HM',
                    help='triplet mining strategy')
# Device options
parser.add_argument('--no-cuda', action='store_true', default=False,
                    help='enables CUDA training')
parser.add_argument('--gpu-id', default='0', type=str,
                    help='id(s) for CUDA_VISIBLE_DEVICES')
parser.add_argument('--seed', type=int, default=0, metavar='S',
                    help='random seed (default: 0)')
parser.add_argument('--log-interval', type=int, default=10, metavar='LI',
                    help='how many batches to wait before logging training status')

args = parser.parse_args()

suffix = '{}_{}'.format(args.training_set, args.batch_reduce)

if args.gor:
    suffix = suffix + '_gor_alpha{:1.1f}'.format(args.alpha)
if args.anchorswap:
    suffix = suffix + '_as'
if args.anchorave:
    suffix = suffix + '_av'

triplet_flag = (args.batch_reduce == 'random_global') or args.gor
# triplet_flag = True

dataset_names = ['turbid_milk', 'turbid_deepblue']

TEST_ON_W1BS = False
# check if path to w1bs dataset testing module exists
if os.path.isdir(args.w1bsroot):
    sys.path.insert(0, args.w1bsroot)
    import utils.w1bs as w1bs

    TEST_ON_W1BS = True

# set the device to use by setting CUDA_VISIBLE_DEVICES env variable in
# order to prevent any memory allocation on unused GPUs
os.environ['CUDA_VISIBLE_DEVICES'] = '0'

args.cuda = not args.no_cuda and torch.cuda.is_available()

if args.cuda:
    cudnn.benchmark = True
    torch.cuda.manual_seed_all(args.seed)

# create loggin directory
if not os.path.exists(args.log_dir):
    os.makedirs(args.log_dir)

# set random seeds
torch.manual_seed(args.seed)
np.random.seed(args.seed)

class TotalDatasetsLoader(data.Dataset):

    def __init__(self, datasets_path, train = True, transform = None, batch_size = None, n_triplets = 5000000, batch_hard = 0, alpha_margin=1.0,model = None, fliprot = False, *arg, **kw):
        super(TotalDatasetsLoader, self).__init__()
        #datasets_path = [os.path.join(datasets_path, dataset) for dataset in os.listdir(datasets_path) if '.pt' in dataset]
        datasets_path = [datasets_path]
        datasets = [torch.load(dataset) for dataset in datasets_path]
        # print (datasets_path)
        data, labels = datasets[0][0], datasets[0][1]

        for i in range(1,len(datasets)):
            data = torch.cat([data,datasets[i][0]])
            labels = torch.cat([labels, datasets[i][1]+torch.max(labels)+1])

        del datasets

        self.data, self.labels = data, labels
        self.transform = transform
        self.train = train
        self.n_triplets = n_triplets
        self.batch_size = batch_size
        self.batch_hard = batch_hard
        self.alpha_margin = alpha_margin
        self.model = model
        self.fliprot = fliprot

        # if self.train:
                # print('Generating {} triplets'.format(self.n_triplets))
        if self.batch_hard == 0:
            self.triplets = self.generate_triplets(self.labels, self.n_triplets, self.batch_size)
        else:
            self.descriptors = self.get_descriptors_for_dataset(self.data, self.model)
            # #
            # np.save('descriptors.npy', self.descriptors)
            # self.descriptors = np.load('descriptors.npy')

            self.triplets = self.generate_hard_triplets(self.labels, self.n_triplets, self.descriptors, self.batch_size)

    @staticmethod
    def generate_triplets(labels, num_triplets, batch_size):
        def create_indices(_labels):
            inds = dict()
            for idx, ind in enumerate(_labels):
                if ind not in inds:
                    inds[ind] = []
                inds[ind].append(idx)
            return inds

        triplets = []
        indices = create_indices(labels.numpy())
        unique_labels = np.unique(labels.numpy())
        n_classes = unique_labels.shape[0]
        # add only unique indices in batch
        already_idxs = set()

        for x in tqdm(range(num_triplets)):
            if len(already_idxs) >= batch_size:
                already_idxs = set()
            c1 = np.random.randint(0, n_classes)
            while c1 in already_idxs:
                c1 = np.random.randint(0, n_classes)
            already_idxs.add(c1)
            c2 = np.random.randint(0, n_classes)
            while c1 == c2:
                c2 = np.random.randint(0, n_classes)
            if len(indices[c1]) == 2:  # hack to speed up process
                n1, n2 = 0, 1
            else:
                n1 = np.random.randint(0, len(indices[c1]))
                n2 = np.random.randint(0, len(indices[c1]))
                while n1 == n2:
                    n2 = np.random.randint(0, len(indices[c1]))
            n3 = np.random.randint(0, len(indices[c2]))
            triplets.append([indices[c1][n1], indices[c1][n2], indices[c2][n3]])
        # print('TRIPLET SHAPE',np.array(triplets).shape)
        return torch.LongTensor(np.array(triplets))


    @staticmethod
    def get_descriptors_for_dataset(data_a,model):
        with torch.no_grad():
            x = torch.ByteTensor(np.array(data_a, dtype=np.uint8))
            x = torch.FloatTensor(np.array(x)).unsqueeze(1)

            if args.cuda:
                model.cuda()
                x = x.cuda()
                x = Variable(x)
                out_a = model(x)
        return out_a.cpu()

        #     # data_a = torch.FloatTensor(np.array(data_a)).unsqueeze_(-1)
        #     descriptors = []
        #     for d in data_a:
        #         dx = torch.FloatTensor(np.array(d)).unsqueeze(0)
        #         dx = dx.unsqueeze(0)

        #         if args.cuda:
        #             model.cuda()
        #             dx = dx.cuda()
            
        #         dx = Variable(dx)
        #         out_a = model(dx)
        #         descriptors.extend(out_a)
        
        # return descriptors
    

    @staticmethod
    def get_hard_negatives(labels, descriptors):
        def BuildKNNGraphByFAISS_GPU(db,k):
            dbsize, dim = db.shape
            flat_config = faiss.GpuIndexFlatConfig()
            flat_config.device = 0
            res = faiss.StandardGpuResources()
            nn = faiss.GpuIndexFlatL2(res, dim, flat_config)
            nn.add(db)
            dists,idx = nn.search(db, k+1)
            return idx[:,1:],dists[:,1:]
            
        def remove_descriptors_with_same_index(min_dist_indices, labels, descriptors):
            res_min_dist_indices = []
            for current_index in range(0, len(min_dist_indices)):
                # get indices of the same 3d points
                point3d_indices = labels[current_index]
                indices_to_remove = []
                for indx in min_dist_indices[current_index]:
                    # add to removal list indices of the same 3d point and same images in other 3d point
                    if(indx == point3d_indices or (descriptors[indx] == descriptors[current_index]).all()):
                        indices_to_remove.append(indx)
                curr_desc = [x for x in min_dist_indices[current_index] if x not in indices_to_remove]
                res_min_dist_indices.append(curr_desc)
            return res_min_dist_indices 
            
        # indices = {}

        # print(len(labels))
        # print(labels[0])
        # for key, value in labels.iteritems():
        #     for ind in value:
        #         indices[ind] = key

        print('getting closest indices .... ')
        descriptors_min_dist, labels = BuildKNNGraphByFAISS_GPU(descriptors, 200)

        print('removing descriptors with same indices .... ')
        descriptors_min_dist = remove_descriptors_with_same_index(descriptors_min_dist, labels, descriptors)

        return descriptors_min_dist

    @staticmethod
    def generate_hard_triplets(labels, num_triplets, descrptrs, batch_size):
        def create_indices(_labels):
            inds = dict()
            for idx, ind in enumerate(_labels):
                if ind not in inds:
                    inds[ind] = []
                inds[ind].append(idx)
            return inds

        triplets = []
        indices = create_indices(labels.numpy())
        unique_labels = np.unique(labels.numpy())
        n_classes = unique_labels.shape[0]
        # add only unique indices in batch
        already_idxs = set()
        if args.cuda:
            descrptrs = descrptrs.cuda()
        for x in tqdm(range(num_triplets)):
            if len(already_idxs) >= batch_size:
                already_idxs = set()
            c1 = np.random.randint(0, n_classes)
            while c1 in already_idxs:
                c1 = np.random.randint(0, n_classes)
            already_idxs.add(c1)
            c2 = np.random.randint(0, n_classes)
            while c1 == c2:
                c2 = np.random.randint(0, n_classes)
            if len(indices[c1]) == 2:  # hack to speed up process
                n1, n2 = 0, 1
                p_idx = indices[c1][n2]
            else:
                n1 = np.random.randint(0, len(indices[c1]))
                a_desc = descrptrs[indices[c1][n1]].cpu().numpy()
                # get indices for all possible positives
                lll = np.array(labels)
                idxs = np.argwhere(lll==c1).ravel().tolist()
                idxs = torch.tensor(idxs)
                if args.cuda:
                    idxs = idxs.cuda()
                pos_desc = torch.index_select(descrptrs, 0, idxs)
                # compute distance between all positives
                x_norm = (pos_desc**2).sum(1).view(-1, 1)
                y_t = torch.transpose(pos_desc, 0, 1)
                y_norm = (pos_desc**2).sum(1).view(1, -1)
                dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(pos_desc, y_t),0.0,np.inf))
                distances = dists.data.cpu().numpy()
                pos_desc = pos_desc.cpu().numpy()
                # select hardest positive (largest distance)
                row_id = np.argwhere(pos_desc==a_desc)[0][0]
                distances = distances[:,row_id]
                p_idx = np.argmax(distances)
                p_idx = int(idxs[p_idx].cpu().numpy())
                
            n3 = np.random.randint(0, len(indices[c2]))
            triplets.append([indices[c1][n1], p_idx, indices[c2][n3]])
        # print('TRIPLET SHAPE',np.array(triplets).shape)
        del dists, x_norm, y_t, y_norm, pos_desc, distances, idxs, a_desc
        torch.cuda.empty_cache()
        return torch.LongTensor(np.array(triplets))


    def __getitem__(self, index):
            def transform_img(img):
                if self.transform is not None:
                    img = self.transform(img.numpy())
                return img

            t = self.triplets[index]
            a, p, n = self.data[t[0]], self.data[t[1]], self.data[t[2]]
            # a, p, n = self.data[t[0]].float(), self.data[t[1]].float(), self.data[t[2]].float()
            
            # normalise range [0,1]
            # a = a / 255
            # p = p / 255
            # n = n / 255

            # # subtract mean
            # # print(torch.min(a),torch.mean(a))
            # a = a - torch.mean(a)
            # p = p - torch.mean(p)
            # n = n - torch.mean(n)

            img_a = transform_img(a)
            img_p = transform_img(p)
            img_n = transform_img(n)

            # print(torch.min(a),torch.min(img_a),'\n')

            # transform images if required
            if self.fliprot:
                do_flip = random.random() > 0.5
                do_rot = random.random() > 0.5

                if do_rot:
                    img_a = img_a.permute(0,2,1)
                    img_p = img_p.permute(0,2,1)

                if do_flip:
                    img_a = torch.from_numpy(deepcopy(img_a.numpy()[:,:,::-1]))
                    img_p = torch.from_numpy(deepcopy(img_p.numpy()[:,:,::-1]))
            return img_a, img_p, img_n

    def __len__(self):
            # if self.train:
            return self.triplets.size(0)


class HardNet(nn.Module):
    """HardNet model definition
    """

    def __init__(self):
        super(HardNet, self).__init__()
        self.features = nn.Sequential(
            # nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, bias=False),
            # nn.BatchNorm2d(32,affine=False),
            # nn.ReLU(),
            # nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, bias=False),
            # nn.BatchNorm2d(64,affine=False),
            # nn.ReLU(),

            nn.Conv2d(1, 32, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(32, affine=False),
            nn.ReLU(),
            nn.Conv2d(32, 32, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(32, affine=False),
            nn.ReLU(),
            nn.Conv2d(32, 64, kernel_size=3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(64, affine=False),
            nn.ReLU(),
            nn.Conv2d(64, 64, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(64, affine=False),
            nn.ReLU(),
            nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(128, affine=False),
            nn.ReLU(),
            nn.Conv2d(128, 128, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(128, affine=False),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Conv2d(128, 128, kernel_size=8, bias=False),
            nn.BatchNorm2d(128, affine=False),
        )

        # self.descr = nn.Sequential(
        #     nn.Linear(64 * 25 * 25, 128),
        #     # nn.Tanh()
        # )

        self.features.apply(weights_init)
        return


    def input_norm(self, x):
        flat = x.view(x.size(0), -1)
        mp = torch.mean(flat, dim=1)
        sp = torch.std(flat, dim=1) + 1e-7
        return (x - mp.unsqueeze(-1).unsqueeze(-1).unsqueeze(-1).expand_as(x)) / sp.unsqueeze(-1).unsqueeze(
            -1).unsqueeze(1).expand_as(x)

    def forward(self, input):
        x_features = self.features(self.input_norm(input))
        x = x_features.view(x_features.size(0), -1)
        # print(x.shape)
        # x = self.descr(x)
        return L2Norm()(x)


def weights_init(m):
    if isinstance(m, nn.Conv2d):
        nn.init.orthogonal_(m.weight.data, gain=0.6)
        try:
            nn.init.constant(m.bias.data, 0.01)
        except:
            pass
    return


def create_loaders(load_random_triplets=False):
    test_dataset_names = copy.copy(dataset_names)
    test_dataset_names.remove(args.training_set)
    kwargs = {'num_workers': args.num_workers, 'pin_memory': args.pin_memory} if args.cuda else {}
    np_reshape32 = lambda x: np.reshape(x, (32, 32, 1))
    # np_reshape29 = lambda x: np.reshape(x, (29, 29, 1))
    transform_test = transforms.Compose([
            transforms.Lambda(np_reshape32),
            transforms.ToPILImage(),
            transforms.Resize(32),
            transforms.ToTensor()])
    transform_train = transforms.Compose([
            transforms.Lambda(np_reshape32),
            transforms.ToPILImage(),
            # transforms.RandomRotation(5,PIL.Image.BILINEAR),
            # transforms.RandomResizedCrop(29, scale = (0.9,1.0),ratio = (0.9,1.1)),
            transforms.Resize(32),
            transforms.ToTensor()])
    transform = transforms.Compose([
            # transforms.Lambda(cv2_scale),
            # transforms.Lambda(np_reshape),
            # transforms.ToTensor(),
            # transforms.Normalize((args.mean_image,), (args.std_image,))])
            transforms.Lambda(np_reshape32),
            transforms.ToPILImage(),
            # transforms.RandomRotation(15,PIL.Image.BILINEAR),
            # transforms.RandomHorizontalFlip(p=0.5),
            # transforms.ColorJitter(brightness=0.1, contrast=0, saturation=0, hue=0),
            transforms.Resize(32),
            transforms.ToTensor()])
    if not args.augmentation:
        transform_train = transform
        transform_test = transform_test

    # train_loader = torch.utils.data.DataLoader(
    #     TotalDatasetsLoader(train=True,
    #                      load_random_triplets=load_random_triplets,
    #                      batch_size=args.batch_size,
    #                      datasets_path=args.hpatches_split+"hpatches_split_a_train.pt",
    #                      fliprot=args.fliprot,
    #                      n_triplets=args.n_triplets,
    #                      name=args.training_set,
    #                      download=True,
    #                      transform=transform_train),
    #     batch_size=args.batch_size,
    #     shuffle=False, **kwargs)

    train_loader = torch.utils.data.DataLoader(
        TotalDatasetsLoader(train=True,
                         load_random_triplets=load_random_triplets,
                         batch_size=args.batch_size,
                         datasets_path=args.hpatches_split+"hpatches_split_a_train.pt",
                         fliprot=args.fliprot,
                         n_triplets=args.n_triplets,
                         batch_hard=0,
                         name=args.training_set,
                         download=True,
                         transform=transform_train),
        batch_size=args.batch_size,
        shuffle=False, **kwargs)

    test_loader = torch.utils.data.DataLoader(
        TotalDatasetsLoader(train=False,
                         load_random_triplets = False,
                         batch_size=512,
                         datasets_path=args.hpatches_split+"hpatches_split_a_test.pt",
                         fliprot=args.fliprot,
                         n_triplets=6980,
                         batch_hard=0,
                         name="turbid_deepblue",
                         download=True,
                         transform=transform_test),
        batch_size=args.test_batch_size,
        shuffle=False, **kwargs)

    return train_loader, test_loader


def train(train_loader, model, optimizer, epoch, logger, load_triplets=True):
    # switch to train mode
    model.train()
    pbar = tqdm(enumerate(train_loader))
    tp, tn = [], []
    for batch_idx, data in pbar:
        if load_triplets:
            data_a, data_p, data_n = data
            
            # visualise random triplet for the first batch - TODO: randomly select batch
            # index = np.random.randint(0, data_a.shape[0])
            # if batch_idx == 0:
                # print(data_n[index,0,28,28])
                # plt.figure()
                # plt.subplot(1, 3, 1)
                # plt.imshow((np.array(data_a[index,0,:,:])*255).astype('uint8'), cmap='gray',vmax=255,vmin=0) 
                # plt.gca().set_xticks([])
                # plt.gca().set_yticks([])
                # plt.title('Anchor', fontsize=12)
                # plt.subplot(1,3,2)
                # plt.imshow((np.array(data_p[index,0,:,:])*255).astype('uint8'), cmap='gray',vmax=255,vmin=0) 
                # plt.title('Positive', fontsize=12)
                # plt.gca().set_xticks([])
                # plt.gca().set_yticks([])
                # plt.subplot(1,3,3)
                # plt.imshow((np.array(data_n[index,0,:,:])*255).astype('uint8'), cmap='gray',vmax=255,vmin=0) 
                # plt.title('Negative', fontsize=12)
                # plt.gca().set_xticks([])
                # plt.gca().set_yticks([])
                # savestr = 'epch' + str(epoch) + '_idx' + str(index) + '.png'
                # plt.savefig(savestr, bbox_inches='tight')
                # plt.close()
        else:
            data_a, data_p = data

        if args.cuda:
            data_a, data_p = data_a.cuda(), data_p.cuda()
            data_a, data_p = Variable(data_a), Variable(data_p)
            out_a = model(data_a)
            out_p = model(data_p)

        if load_triplets:
            data_n = data_n.cuda()
            data_n = Variable(data_n)
            out_n = model(data_n)

        vis_id = 99999
        if args.batch_reduce == 'L2Net':
            loss = loss_L2Net(out_a, out_p, anchor_swap=args.anchorswap,
                              margin=args.margin, loss_type=args.loss)
        elif args.batch_reduce == 'random_global':
            loss = loss_random_sampling(out_a, out_p, out_n,
                                        margin=args.margin,
                                        anchor_swap=args.anchorswap,
                                        loss_type=args.loss)
            # if batch_idx==0:
            #     vis_id = np.random.randint(0, data_a.shape[0])
            #     cv2.imwrite('batch' + str(batch_idx) + '_randomsample_epch' + str(epoch) + '_idx' + str(vis_id) + '_a.png',(np.array(data_a[vis_id,0,:,:].cpu())*255).astype('uint8'))
            #     cv2.imwrite('batch' + str(batch_idx) + '_randomsample_epch' + str(epoch) + '_idx' + str(vis_id) + '_p.png',(np.array(data_p[vis_id,0,:,:].cpu())*255).astype('uint8'))
            #     cv2.imwrite('batch' + str(batch_idx) + '_randomsample_epch' + str(epoch) + '_idx' + str(vis_id) + '_n.png',(np.array(data_n[vis_id,0,:,:].cpu())*255).astype('uint8'))

            # if batch_idx==20:
            # visualise distribution of batch
            tp, tn = [], []
            # # get pairwise distances
            x_norm = (out_a**2).sum(1).view(-1, 1)
            y_t = torch.transpose(out_p, 0, 1)
            y_norm = (out_p**2).sum(1).view(1, -1)
            dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(out_a, y_t),0.0,np.inf))
            d_p = torch.diag(dists) # 1D tensor of distances for positive samples
            tp.extend(d_p.data.cpu().numpy()) 
            y_t = torch.transpose(out_n, 0, 1)
            y_norm = (out_n**2).sum(1).view(1, -1)
            dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(out_a, y_t),0.0,np.inf))
            d_n = torch.diag(dists) # 1D tensor of distances for positive samples
            tn.extend(d_n.data.cpu().numpy()) 
            # # # plot positives
            # tp = np.asarray(tp)
            # plt.figure(figsize=(8, 5))
            # sns.distplot(tp, hist=False, label='Positives',
            #             bins=int(30), color = 'green', 
            #             hist_kws={'edgecolor':'black'},
            #             kde_kws={'linewidth': 2})
            # # # plot negatives
            # tn = np.asarray(tn)
            # sns.distplot(tn, hist=False, kde=True, label='Negatives',
            #             bins=int(30), color = 'darkred', 
            #             hist_kws={'edgecolor':'black'},
            #             kde_kws={'linewidth': 2})
            # # plt.legend()
            # savestr = 'traindistances_epoch' + str(epoch) + '_batch50.png'
            # plt.savefig(savestr, bbox_inches='tight')
            # plt.close()
            del x_norm, y_t, y_norm, dists, d_p
            del d_n
       
        elif args.batch_reduce == 'random_sh':
            if batch_idx==0:
                vis_id = np.random.randint(0, data_a.shape[0])
            loss, n_idx, n_type = loss_semi_hard(out_a, out_p,
                            margin=args.margin,
                            anchor_swap=args.anchorswap,
                            anchor_ave=args.anchorave,
                            batch_reduce=args.batch_reduce,
                            loss_type=args.loss,
                            visualise_idx=vis_id)
            
            if n_type>0:
                d_n = data_p[n_idx,0,:,:].cpu()
            else:
                d_n = data_a[n_idx,0,:,:].cpu()

            # visualise random semi-hard sample
            # if batch_idx==0:
                # print(n_idx,vis_id)
                # cv2.imwrite('batch' + str(batch_idx) + '_hardsample_epch' + str(epoch) + '_idx' + str(vis_id) + '_a.png',(np.array(data_a[vis_id,0,:,:].cpu())*255).astype('uint8'))
                # cv2.imwrite('batch' + str(batch_idx) + '_hardsample_epch' + str(epoch) + '_idx' + str(vis_id) + '_p.png',(np.array(data_p[vis_id,0,:,:].cpu())*255).astype('uint8'))
                # cv2.imwrite('batch' + str(batch_idx) + '_hardsample_epch' + str(epoch) + '_idx' + str(vis_id) + '_n.png',(np.array(d_n)*255).astype('uint8'))

            # if batch_idx==20:
            # visualise distribution of batch
            tp, tn = [], []
            # # get pairwise distances
            x_norm = (out_a**2).sum(1).view(-1, 1)
            y_t = torch.transpose(out_p, 0, 1)
            y_norm = (out_p**2).sum(1).view(1, -1)
            dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(out_a, y_t),0.0,np.inf))
            d_p = torch.diag(dists) # 1D tensor of distances for positive samples
            tp.extend(d_p.data.cpu().numpy()) 
            y_t = torch.transpose(out_n, 0, 1)
            y_norm = (out_n**2).sum(1).view(1, -1)
            dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(out_a, y_t),0.0,np.inf))
            d_n = torch.diag(dists) # 1D tensor of distances for positive samples
            tn.extend(d_n.data.cpu().numpy()) 
            # # # plot positives
            # tp = np.asarray(tp)
            # plt.figure(figsize=(8, 5))
            # sns.distplot(tp, hist=False, 
            #             bins=int(30), color = 'green', 
            #             hist_kws={'edgecolor':'black'},
            #             kde_kws={'linewidth': 2})
            # # # plot negatives
            # tn = np.asarray(tn)
            # sns.distplot(tn, hist=False, kde=True, 
            #             bins=int(30), color = 'darkred', 
            #             hist_kws={'edgecolor':'black'},
            #             kde_kws={'linewidth': 2})
            # # plt.legend()
            # savestr = 'traindistances_epoch' + str(epoch) + '_batch100.png'
            # plt.savefig(savestr, bbox_inches='tight')
            # plt.close()
            del x_norm, y_t, y_norm, dists, d_p
            del d_n

        else:
            if batch_idx==0:
                vis_id = np.random.randint(0, data_a.shape[0])
            loss, n_idx,n_type = loss_HardNet(out_a, out_p,
                                margin=args.margin,
                                anchor_swap=args.anchorswap,
                                anchor_ave=args.anchorave,
                                batch_reduce=args.batch_reduce,
                                loss_type=args.loss,
                                visualise_idx=vis_id)
            
            if n_type>0:
                d_n = data_p[n_idx,0,:,:].cpu()
            else:
                d_n = data_a[n_idx,0,:,:].cpu()

            # visualise random hard sample
            # if batch_idx==0:
                # print(n_idx,vis_id)
                # cv2.imwrite('batch' + str(batch_idx) + '_hardsample_epch' + str(epoch) + '_idx' + str(vis_id) + '_a.png',(np.array(data_a[vis_id,0,:,:].cpu())*255).astype('uint8'))
                # cv2.imwrite('batch' + str(batch_idx) + '_hardsample_epch' + str(epoch) + '_idx' + str(vis_id) + '_p.png',(np.array(data_p[vis_id,0,:,:].cpu())*255).astype('uint8'))
                # cv2.imwrite('batch' + str(batch_idx) + '_hardsample_epch' + str(epoch) + '_idx' + str(vis_id) + '_n.png',(np.array(d_n)*255).astype('uint8'))

            # if batch_idx==20:
            # visualise distribution of batch
            tp, tn = [], []
            # # get pairwise distances
            x_norm = (out_a**2).sum(1).view(-1, 1)
            y_t = torch.transpose(out_p, 0, 1)
            y_norm = (out_p**2).sum(1).view(1, -1)
            dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(out_a, y_t),0.0,np.inf))
            d_p = torch.diag(dists) # 1D tensor of distances for positive samples
            tp.extend(d_p.data.cpu().numpy()) 
            y_t = torch.transpose(out_n, 0, 1)
            y_norm = (out_n**2).sum(1).view(1, -1)
            dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(out_a, y_t),0.0,np.inf))
            d_n = torch.diag(dists) # 1D tensor of distances for positive samples
            tn.extend(d_n.data.cpu().numpy()) 
            # # plot positives
            # tp = np.asarray(tp)
            # plt.figure(figsize=(8, 5))
            # sns.distplot(tp, hist=False, 
            #             bins=int(30), color = 'green', 
            #             hist_kws={'edgecolor':'black'},
            #             kde_kws={'linewidth': 2})
            # # # plot negatives
            # tn = np.asarray(tn)
            # sns.distplot(tn, hist=False, kde=True, 
            #             bins=int(30), color = 'darkred', 
            #             hist_kws={'edgecolor':'black'},
            #             kde_kws={'linewidth': 2})
            # savestr = 'traindistances_epoch' + str(epoch) + '_batch100.png'
            # plt.savefig(savestr, bbox_inches='tight')
            # plt.close()
            del x_norm, y_t, y_norm, dists, d_p
            del d_n

        if args.decor:
            loss += CorrelationPenaltyLoss()(out_a)

        if args.gor:
            loss += args.alpha * global_orthogonal_regularization(out_a, out_n)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        adjust_learning_rate(optimizer)
        if batch_idx % args.log_interval == 0:
            pbar.set_description(
                'Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                    epoch, batch_idx * len(data_a), len(train_loader.dataset),
                           100. * batch_idx / len(train_loader),
                    loss.item()))
                    # loss.data[0]))
    if (args.enable_logging):
        logger.log_value('loss', loss.item()).step()
    try:
        os.stat('{}{}'.format(args.model_dir, suffix))
    except:
        os.makedirs('{}{}'.format(args.model_dir, suffix))

    # store data to replot later
    if epoch==(args.start_epoch + args.epochs - 1):
        tp = np.asarray(tp)
        plt.figure(figsize=(8, 5))
        sns.distplot(tp, hist=False, 
                    bins=int(30), color = 'green', 
                    hist_kws={'edgecolor':'black'},
                    kde_kws={'linewidth': 2})
        # # plot negatives
        tn = np.asarray(tn)
        sns.distplot(tn, hist=False, kde=True, 
                    bins=int(30), color = 'darkred', 
                    hist_kws={'edgecolor':'black'},
                    kde_kws={'linewidth': 2})
        savestr = 'traindistances_epoch' + str(epoch) + '.png'
        plt.savefig(savestr, bbox_inches='tight')
        plt.close()
        
        savestr = 'train_tp_epoch' + str(epoch) + '.txt'
        np.savetxt(savestr, tp, delimiter=',') 
        savestr = 'train_tn_epoch' + str(epoch) + '.txt'
        np.savetxt(savestr, tn, delimiter=',')



    torch.save({'epoch': epoch + 1, 'state_dict': model.state_dict()},
               '{}{}/checkpoint_{}.pth'.format(args.model_dir, suffix, epoch))
    
    return loss.item()


def test(test_loader, model, epoch, logger, logger_test_name, test_sample_x, test_sample_y, all_val_set_x, all_val_set_x_ref, all_val_set_y, all_val_set_images, sample_train_set_x, sample_train_set_x_ref, sample_train_set_y, sample_train_set_images):

    img_y_labels = list(range(2,20))
    # switch to evaluate mode
    model.eval()

    distances, labels, tp, tn = [], [], [], []
    num_tests = 0
    pbar = tqdm(enumerate(test_loader))
    for batch_idx, data in pbar:
        data_a, data_p, data_n = data
        # del data_n
        if args.cuda:
            data_a, data_p, data_n = data_a.cuda(), data_p.cuda(), data_n.cuda()
        with torch.no_grad():
            data_a, data_p, data_n = Variable(data_a), \
                                    Variable(data_p), \
                                    Variable(data_n)

            # descriptors
            out_a = model(data_a)
            out_p = model(data_p)
            out_n = model(data_n)

            # euclidean distance
            x_norm = (out_a**2).sum(1).view(-1, 1)
            y_t = torch.transpose(out_p, 0, 1)
            y_norm = (out_p**2).sum(1).view(1, -1)
            dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(out_a, y_t),0.0,np.inf))
            d_p = torch.diag(dists) # 1D tensor of distances for positive samples
            distances.extend(d_p.data.cpu().numpy())        
            labels.extend(np.ones(len(d_p)))
            tp.extend(d_p.data.cpu().numpy()) 

            y_t = torch.transpose(out_n, 0, 1)
            y_norm = (out_n**2).sum(1).view(1, -1)
            dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(out_a, y_t),0.0,np.inf))
            d_n = torch.diag(dists) # 1D tensor of distances for positive samples
            distances.extend(d_n.data.cpu().numpy())        
            labels.extend(np.zeros(len(d_n)))
            tn.extend(d_n.data.cpu().numpy()) 

            # labels.append(np.eye(len(out_a)).reshape(-1, 1))
            # dists = torch.sqrt(torch.sum((out_a - out_p) ** 2, 1))  # euclidean distance
            # distances.append(dists.data.cpu().numpy().reshape(-1, 1))
            # labels.append(np.eye(len(out_a)).reshape(-1, 1))
            
            num_tests += (len(out_p) + len(out_n))

            test_loss = loss_random_sampling(out_a, out_p, out_n,
                                            margin=args.margin,
                                            anchor_swap=args.anchorswap,
                                            loss_type=args.loss)

            if batch_idx % args.log_interval == 0:
                pbar.set_description('Test Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                    epoch, batch_idx * len(data_a), len(test_loader.dataset),
                        100. * batch_idx / len(test_loader),test_loss.item()))
    
    del out_a, out_p, out_n

    # labels = np.ones(len(distances))
    # num_tests = test_loader.dataset.matches.size(0)
    distances = np.asarray(distances)
    labels = np.asarray(labels)
    # labels = np.vstack(labels).reshape(num_tests)
    # distances = np.array(distances) + 1e-8
    fpr95 = ErrorRateAt95Recall(labels, 1.0 / (distances + 1e-8))
    # fdr95 = ErrorRateFDRAt95Recall(labels, 1.0 / (distances + 1e-8))

    #fpr2 = convertFDR2FPR(fdr95, 0.95, 50000, 50000)
    #fpr2fdr = convertFPR2FDR(fpr2, 0.95, 50000, 50000)

    #print('\33[91mTest set: Accuracy(FDR95): {:.8f}\n\33[0m'.format(fdr95))
    print('\33[91mTest set: Accuracy(FPR95): {:.8f}\n\33[0m'.format(fpr95))
    #print('\33[91mTest set: Accuracy(FDR2FPR): {:.8f}\n\33[0m'.format(fpr2))
    #print('\33[91mTest set: Accuracy(FPR2FDR): {:.8f}\n\33[0m'.format(fpr2fdr))

    #fpr2 = convertFDR2FPR(round(fdr95,2), 0.95, 50000, 50000)
    #fpr2fdr = convertFPR2FDR(round(fpr2,2), 0.95, 50000, 50000)

    #print('\33[91mTest set: Accuracy(FDR2FPR): {:.8f}\n\33[0m'.format(fpr2))
    #print('\33[91mTest set: Accuracy(FPR2FDR): {:.8f}\n\33[0m'.format(fpr2fdr))

    # visualise distance distributions
    # # true positives
    tp = np.asarray(tp)
    # # true positives
    tn = np.asarray(tn)

    if (args.enable_logging):
        logger.log_value(logger_test_name + ' fpr95', fpr95)
    
    # plot example distance matrix for samples from training set
    def pairwise_dstncs(descA):
        distances = []
        # euclidean distance
        x_norm = (descA**2).sum(1).view(-1, 1)
        y_t = torch.transpose(descA, 0, 1)
        y_norm = (descA**2).sum(1).view(1, -1)
        dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(descA, y_t),0.0,np.inf))
        distances.extend(dists.data.cpu().numpy())        
        return distances

    def visualise_distance_matrix(dist_m,epoch,max_d=2.0):
        # normalise matrix values using specified maximum
        dist_m = np.array(dist_m)
        dist_m /= max_d
        dist_m *= 255
        dist_m = np.array(dist_m).astype('uint8')
        savestr = 'distancematrix_epoch' + str(epoch) + '.png'
        cv2.imwrite(savestr,dist_m)
        # plt.figure(figsize=(5, 5))
        # plt.imshow(dist_m,cmap='gray',vmin=0,vmax=max_d)
        # plt.axis('off')
        # plt.savefig(savestr, bbox_inches='tight')
        # plt.close()


    # if args.cuda:
    #     test_sample_x = test_sample_x.cuda()
    # with torch.no_grad():
    #     test_sample_x = Variable(test_sample_x)
    #     des_eg_test = model(test_sample_x)
    #     dist_m_test = pairwise_dstncs(des_eg_test)
    #     visualise_distance_matrix(dist_m_test,epoch)

    # plot ROC curve
    y_pred_te = np.concatenate((tp,tn))
    y1 = np.ones(len(tp))
    y2 = np.zeros(len(tn))
    y_true_te = np.concatenate((y1,y2))
    max_distance = np.max(y_pred_te)

    def compute_accuracy(y_true, y_pred, t):
        pred = y_pred.ravel() < t
        return np.mean(pred == y_true)

    def compute_ROC(thresh, y_true, y_pred):        
        tp = 0
        fp = 0
        tn = 0
        fn = 0
        counter = 0;    
        for y in y_pred:
            if y < thresh:
                if y_true[counter]==1:
                    tp += 1
                else:
                    fp += 1
            else:
                if y_true[counter]==0:
                    tn += 1
                else:
                    fn += 1
            counter += 1
        tpr = tp / (tp + fn)
        fpr = fp / (fp + tn)
        roc = [tpr, fpr]
        return roc

    te_tpr = []
    te_fpr = []
    inc = 0.05
    r = np.arange(0.0, max_distance+inc, inc)
    for t in r:
        roc = compute_ROC(t,y_true_te,y_pred_te)
        te_tpr.append(roc[0])
        te_fpr.append(roc[1])
    plt.figure(figsize=(6, 6))
    # plt.plot(tr_fpr,tr_tpr, label='train set')
    plt.plot(te_fpr,te_tpr, label='validation set')
    plt.xlabel('False positive rate')
    plt.ylabel('True positive rate')
    plt.legend()
    savestr = 'test_roc_epoch' + str(epoch) + '.png'
    plt.savefig(savestr, bbox_inches='tight')
    plt.close()

    # determine optimal threshold from validation set
    roc_difs = np.array(te_tpr) - np.array(te_fpr)
    max_dif = np.amax(roc_difs)
    idx = np.where(roc_difs == max_dif)
    thresh = int(np.mean(idx[0])) * inc
    # # compute final accuracy on training and test sets
    val_acc = compute_accuracy(y_true_te, y_pred_te,thresh)
    print('When using selected threshold from validation set: ',thresh)
    print('* Accuracy on validation set: %0.2f%%' % (100 * val_acc))
    print("\n")

    plt.figure(figsize=(8, 5))
    sns.distplot(tp, hist=False, 
                bins=int(30), color = 'green', label='Positives',
                hist_kws={'edgecolor':'black'},
                kde_kws={'linewidth': 2})
    # # true positives
    tn = np.asarray(tn)
    sns.distplot(tn, hist=False, kde=True, label='Negatives', 
                bins=int(30), color = 'darkred', 
                hist_kws={'edgecolor':'black'},
                kde_kws={'linewidth': 2})
    # plt.axvline(thresh,linewidth=1, color='k',linestyle='--')
    savestr = 'testdistances_epoch' + str(epoch) + '.png'
    plt.savefig(savestr, bbox_inches='tight')
    plt.close()
    
    # store data to replot later
    if epoch==(args.start_epoch + args.epochs - 1):
        savestr = 'test_tp_epoch' + str(epoch) + '.txt'
        np.savetxt(savestr, tp, delimiter=',') 
        savestr = 'test_tn_epoch' + str(epoch) + '.txt'
        np.savetxt(savestr, tn, delimiter=',') 

    del tn, tp
    del y_pred_te, te_tpr, te_fpr, roc_difs


    # # visualise distance against image id / patch id
    # all_val_set_x, all_val_set_y, all_val_set_images
    if args.cuda:
        all_val_set_x = all_val_set_x.cuda()
        all_val_set_x_ref = all_val_set_x_ref.cuda()
    
    with torch.no_grad():
        def pairwise_dstncs_2vec(ref_dsc,all_dsc):
            x_norm = (ref_dsc**2).sum(1).view(-1, 1)
            distances, av_d = [], []
            splts = torch.chunk(all_dsc, 5)
            del all_dsc
            for s in splts:
                 # euclidean distance
                y_t = torch.transpose(s, 0, 1)
                y_norm = (s**2).sum(1).view(1, -1)
                dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(ref_dsc, y_t),0.0,np.inf))
                dists = torch.diag(dists) # get diagonal only
                distances.extend(dists.data.cpu().numpy())   
                av_d.append(np.average(dists.data.cpu().numpy()))
            return distances,av_d

        # predict descriptors
        all_val_set_x = Variable(all_val_set_x)
        all_val_set_x_ref = Variable(all_val_set_x_ref)
        desc_all_val = model(all_val_set_x)
        ref_desc = model(all_val_set_x_ref)
        dist_m_all_val,average_scores = pairwise_dstncs_2vec(ref_desc,desc_all_val)

        # compute average for each image
        average_scores = []
        dist_m_all_val = np.array(dist_m_all_val)
        all_val_set_images = np.array(all_val_set_images)
        for ly in img_y_labels:
            in_l = np.where(all_val_set_images==ly)
            av = np.median(dist_m_all_val[in_l])
            average_scores.append(av)

    # # plot against patch label
    # fig, ax = plt.subplots(figsize=(6,6))
    # plt.plot(all_val_set_y,dist_m_all_val,'.',color=(0.0, 0.5, 0.0, 0.4))
    # # plt.plot(average_scores,'o-', color='orange',label='Mean distance')
    # # plt.axhline(thresh,linewidth=1, color='k',linestyle='--',label='Threshold')
    # plt.xlabel('Patch index')
    # plt.ylabel('distance')
    # # plt.legend()
    # savestr = 'val_patchid-v-dist_epoch' + str(epoch) + '.png'
    # plt.savefig(savestr, bbox_inches='tight')
    # plt.close()

    # plot against image label
    fig, ax = plt.subplots(figsize=(6,6))
    plt.plot(all_val_set_images,dist_m_all_val,'.',color=(0.0, 0.5, 0.0, 0.4))
    plt.plot(img_y_labels,average_scores,'o-', color='orange',label='Mean distance')
    # plt.axhline(thresh,linewidth=1, color='k', linestyle='--',label='Threshold')
    plt.xlabel('Image index')
    plt.ylabel('distance')
    # plt.legend()
    savestr = 'val_imageid-v-dist_epoch' + str(epoch) + '.png'
    plt.savefig(savestr, bbox_inches='tight')
    plt.close()

    if epoch==(args.start_epoch + args.epochs - 1):
        savestr = 'valset_imagelabels_epoch' + str(epoch) + '.txt'
        np.savetxt(savestr, all_val_set_images, delimiter=',') 
        savestr = 'valset_patchlabels_epoch' + str(epoch) + '.txt'
        np.savetxt(savestr, all_val_set_y, delimiter=',') 
        savestr = 'valset_distances_epoch' + str(epoch) + '.txt'
        np.savetxt(savestr, dist_m_all_val, delimiter=',') 

    # if epoch==49:
    #     savestr = 'final_val_distances_thresh' + str(thresh) + '.txt'
    #     np.savetxt(savestr, dist_m_all_val, delimiter=',')   # X is an array
    #     savestr = 'val_imageids.txt'
    #     np.savetxt(savestr, all_val_set_images, delimiter=',')   # X is an array
    #     savestr = 'val_patchids.txt'
    #     np.savetxt(savestr, all_val_set_y, delimiter=',')   # X is an array

    # # visualise distance against image id / patch id for TRAINING sample
    # sample_train_set_x, sample_train_set_x_ref, sample_train_set_y, sample_train_set_images
    if args.cuda:
        sample_train_set_x = sample_train_set_x.cuda()
        sample_train_set_x_ref = sample_train_set_x_ref.cuda()
    
    with torch.no_grad():
        def pairwise_dstncs_2vec2(ref_dsc,all_dsc):
            x_norm = (ref_dsc**2).sum(1).view(-1, 1)
            distances, av_d = [], []
            splts = torch.chunk(all_dsc, 9)
            del all_dsc
            for s in splts:
                 # euclidean distance
                y_t = torch.transpose(s, 0, 1)
                y_norm = (s**2).sum(1).view(1, -1)
                dists = torch.sqrt(torch.clamp(x_norm + y_norm - 2.0 * torch.mm(ref_dsc, y_t),0.0,np.inf))
                dists = torch.diag(dists) # get diagonal only
                distances.extend(dists.data.cpu().numpy())  
                av_d.append(np.average(dists.data.cpu().numpy()))
            return distances, av_d

        # predict descriptors
        sample_train_set_x = Variable(sample_train_set_x)
        sample_train_set_x_ref = Variable(sample_train_set_x_ref)
        desc_all_val = model(sample_train_set_x)
        ref_desc = model(sample_train_set_x_ref)
        dist_m_all_val, average_scores = pairwise_dstncs_2vec2(ref_desc,desc_all_val)

        average_scores = []
        dist_m_all_val = np.array(dist_m_all_val)
        sample_train_set_images = np.array(sample_train_set_images)
        for ly in img_y_labels:
            in_l = np.where(sample_train_set_images==ly)
            av = np.median(dist_m_all_val[in_l])
            average_scores.append(av)

    # # plot against patch label
    # fig, ax = plt.subplots(figsize=(6,6))
    # plt.plot(sample_train_set_y,dist_m_all_val,'.',color=(0.0, 0.5, 0.0, 0.4))
    # # plt.plot(average_scores,'o',label='mean distance for image')
    # # plt.axhline(thresh,linewidth=1, color='k',linestyle='--',label='Threshold')
    # plt.xlabel('Patch index')
    # plt.ylabel('distance')
    # # plt.legend()
    # savestr = 'train_patchid-v-dist_epoch' + str(epoch) + '.png'
    # plt.savefig(savestr, bbox_inches='tight')
    # plt.close()

    # plot against image label
    fig, ax = plt.subplots(figsize=(6,6))
    plt.plot(sample_train_set_images,dist_m_all_val,'.',color=(0.0, 0.5, 0.0, 0.4))
    # plt.plot(average_scores,'o',label='mean distance for image')
    plt.plot(img_y_labels,average_scores,'o-', color='orange',label='Mean distance')
    plt.xlabel('Image index')
    plt.ylabel('distance')
    # plt.legend()
    savestr = 'train_imageid-v-dist_epoch' + str(epoch) + '.png'
    plt.savefig(savestr, bbox_inches='tight')
    plt.close()

    if epoch==(args.start_epoch + args.epochs - 1):
        savestr = 'trainset_imagelabels_epoch' + str(epoch) + '.txt'
        np.savetxt(savestr, sample_train_set_images, delimiter=',') 
        savestr = 'trainset_distances_epoch' + str(epoch) + '.txt'
        np.savetxt(savestr, dist_m_all_val, delimiter=',') 
        savestr = 'trainset_patchlabels_epoch' + str(epoch) + '.txt'
        np.savetxt(savestr, sample_train_set_y, delimiter=',') 

    return test_loss.item(), fpr95


def adjust_learning_rate(optimizer):
    """Updates the learning rate given the learning rate decay.
    The routine has been implemented according to the original Lua SGD optimizer
    """
    for group in optimizer.param_groups:
        if 'step' not in group:
            group['step'] = 0.
        else:
            group['step'] += 1.
        group['lr'] = args.lr * (
            1.0 - float(group['step']) * float(args.batch_size) / (args.n_triplets * float(args.epochs)))
        
        # print(args.lr * (1.0 - float(group['step']) * float(args.batch_size) / (args.n_triplets * float(args.epochs))))
    return


def create_optimizer(model, new_lr):
    # setup optimizer
    if args.optimizer == 'sgd':
        optimizer = optim.SGD(model.parameters(), lr=new_lr,
                              momentum=0.9, dampening=0.9,
                              weight_decay=args.wd)
    elif args.optimizer == 'adam':
        optimizer = optim.Adam(model.parameters(), lr=new_lr,
                               weight_decay=args.wd)
    else:
        raise Exception('Not supported optimizer: {0}'.format(args.optimizer))
    return optimizer


def main(train_loader, test_loader, model, logger, file_logger):
    # load test patch trajectories
    def sortedWalk(top, topdown=True, onerror=None):
        from os.path import join, isdir, islink
        names = os.listdir(top)
        names.sort()
        dirs, nondirs = [], []
        for name in names:
            if isdir(os.path.join(top, name)):
                dirs.append(name)
            else:
                nondirs.append(name)
        if topdown:
            yield top, dirs, nondirs
        for name in dirs:
            path = join(top, name)
            if not os.path.islink(path):
                for x in sortedWalk(path, topdown, onerror):
                    yield x
        if not topdown:
            yield top, dirs, nondirs

    def load_patchDataset_test(patch_dir,incld):
        X = []
        y = []
        cl = []
        for subdir, dirs, files in sortedWalk(patch_dir):
            yy = subdir.replace(patch_dir+'/','')
            # print(yy)            
            files = sorted(files)
            for file in files:
                if yy != patch_dir:
                    s = file.replace('.jpg','')
                    if int(s) in incld:
                        yyy = yy[1:]
                        y.append(int(yyy))
                        f = os.path.join(subdir, file)
                        ptch = cv2.imread(f, cv2.IMREAD_GRAYSCALE)
                        ptch = cv2.resize(ptch, (32, 32))
                        ptch = np.array(ptch, dtype=np.uint8)
                        X.append(ptch)
                        if not int(yyy) in cl:
                            cl.append(int(yyy))     
        nC = len(cl)
        print(len(y),'patches loaded from',nC,'classes')
        return torch.ByteTensor(np.array(X, dtype=np.uint8)), y

    def get_frame_patches(fldr,n):
        X = []
        img_fldr = fldr + '/' + str(n)
        print(img_fldr)
        folder = os.fsencode(img_fldr)
        fldr = os.listdir(folder)
        fldr = sorted(fldr)
        for file in fldr:
            filepath = img_fldr + "/" + os.fsdecode(file)
            if filepath.endswith(".jpg"):
                ptch = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
                ptch = cv2.resize(ptch, (64, 64))
                ptch = np.array(ptch, dtype=np.uint8)
                X.append(ptch)
        return torch.ByteTensor(np.array(X, dtype=np.uint8))

    def load_patchDataset_allval(patch_dir,incld,n_patches):
        n_imgs = len(incld)+1
        idxs = np.zeros((n_patches,n_imgs))
        X = []
        y = []
        y2 = []
        cl = []
        counter = 0
        for subdir, dirs, files in sortedWalk(patch_dir):
            yy = subdir.replace(patch_dir+'/','')
            # print(yy)
            files = sorted(files)
            for file in files:
                if yy != patch_dir:
                    s = file.replace('.jpg','')
                    if int(yy) in incld:
                        f = os.path.join(subdir, file)
                        ptch = cv2.imread(f, cv2.IMREAD_GRAYSCALE)
                        ptch = cv2.resize(ptch, (64, 64))
                        ptch = np.array(ptch, dtype=np.uint8)
                    
                        X.append(ptch)
                        y.append(int(s))
                        y2.append(int(yy)+1)
                        idxs[int(s),int(yy)] = counter
                        if not int(s) in cl:
                            cl.append(int(s))  
                        counter =  counter + 1   
        nC = len(cl)
        print(len(y),'patches loaded from',nC,'classes')

        return torch.ByteTensor(np.array(X, dtype=np.uint8)), idxs, y, y2

    # print the experiment configuration
    print('\nparsed options:\n{}\n'.format(vars(args)))

    # if (args.enable_logging):
    #    file_logger.log_string('logs.txt', '\nparsed options:\n{}\n'.format(vars(args)))

    if args.cuda:
        model.cuda()

    optimizer1 = create_optimizer(model.features, args.lr)

    # optionally resume from a checkpoint
    if args.resume:
        if os.path.isfile(args.resume):
            print('=> loading checkpoint {}'.format(args.resume))
            checkpoint = torch.load(args.resume)
            args.start_epoch = checkpoint['epoch']
            checkpoint = torch.load(args.resume)
            model.load_state_dict(checkpoint['state_dict'])
        else:
            print('=> no checkpoint found at {}'.format(args.resume))
    
    kwargs = {'num_workers': args.num_workers, 'pin_memory': args.pin_memory} if args.cuda else {}

    test_losses_arr, test_fpr95_arr, train_losses_arr = [], [], []

    # np_reshape29 = lambda x: np.reshape(x, (29, 29, 1))
    np_reshape32 = lambda x: np.reshape(x, (32, 32, 1))
    transform = transforms.Compose([
        transforms.Lambda(np_reshape32),
        transforms.ToPILImage(),
        # transforms.RandomRotation(15,PIL.Image.BILINEAR),
        # transforms.RandomHorizontalFlip(p=0.5),
        # transforms.ColorJitter(brightness=0.1, contrast=0, saturation=0, hue=0),
        transforms.Resize(32),
        transforms.ToTensor()])

    # # patch_fldr = '/content/hardnet/data/sets/turbid/test_data/patches'
    # inc_list = [0,1,2,3,4,5,6,7,8,9]
    # # xt, yt = load_patchDataset_test(patch_fldr,inc_list)
    # # xt = torch.FloatTensor(np.array(xt)).unsqueeze(1)
    # xt, yt = [], []
    # patch_fldr = '/content/hardnet/data/sets/turbid/test_data/validation_all'
    # inc_list = [0,1,2,3,4,5]
    # xv, xv_ref, yv_p, yv_i = load_patchDataset_allval(patch_fldr,inc_list)
    # xv = torch.FloatTensor(np.array(xv)).unsqueeze(1)
    # xv_ref = torch.FloatTensor(np.array(xv_ref)).unsqueeze(1)
    # # xv, xv_ref, yv_p, yv_i  = [], [], [], []
    # patch_fldr = '/content/hardnet/data/sets/turbid/test_data/testing_randomsample'
    # inc_list = [0,1,2,3,4,5,6,7,8,9]
    # xts, xts_ref, yts_p, yts_i = load_patchDataset_allval(patch_fldr,inc_list)
    # xts = torch.FloatTensor(np.array(xts)).unsqueeze(1)
    # xts_ref = torch.FloatTensor(np.array(xts_ref)).unsqueeze(1)
    # # xts, xts_ref, yts_p, yts_i = [], [], [], []

    model.eval()
    
    # load all patches
    inc_list = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
    patch_fldr = '/content/hardnet/data/sets/turbid/test_data/validation_all_' + str(args.imageSize)
    xv, label_indices, yv_p, yv_i = load_patchDataset_allval(patch_fldr,inc_list,330)
    xv = torch.FloatTensor(np.array(xv)).unsqueeze(1)

    # load comparisons
    fl = '/content/hardnet/data/sets/turbid/test_data/comparisons.txt'    
    comparisons = np.loadtxt(fl,delimiter=',').astype('uint16')

    # compute all descriptors
    if args.cuda:
        xv = xv.cuda()
    with torch.no_grad():
        xv = Variable(xv)
        desc_xv = model(xv)

    tn, tp, = [], []

    # for each comparison
    for p in comparisons:
        pos_flag = p[4]
        d_idx_a = int(label_indices[p[1],p[0]-2])
        desc_a = desc_xv[d_idx_a].cpu().numpy()

        d_idx_b = int(label_indices[p[3],p[2]-2])
        desc_b = desc_xv[d_idx_b].cpu().numpy()

        # compute euclidean distance
        d = cv2.norm(desc_a,desc_b,cv2.NORM_L2)

        if pos_flag == 1:
            tp.append(d)
        else:
            tn.append(d)

    # save to files
    np.savetxt('tp.txt', tp, delimiter=',') 
    np.savetxt('tn.txt', tn, delimiter=',') 

    # compare positives for first 100 patches
    n_tests = 200 # limit to only include milk patches
    distances = np.zeros((n_tests,len(inc_list)))
    for ii in range(n_tests):
        ref_idx = int(label_indices[ii,0])
        ref_desc = desc_xv[ref_idx].cpu().numpy()

        for jj in range(len(inc_list)):
            p_idx = int(label_indices[ii,jj])
            desc = desc_xv[p_idx].cpu().numpy()
            d = cv2.norm(ref_desc,desc,cv2.NORM_L2)
            distances[ii,jj] = d

    np.savetxt('positive_dists.txt', distances, delimiter=',')


    patch_fldr = '/content/hardnet/data/sets/vids'
    d = get_frame_patches(patch_fldr,0)
    d = torch.FloatTensor(np.array(d)).unsqueeze(1)
    if args.cuda:
        d = d.cuda()
    with torch.no_grad():
        d = Variable(d)
        d = model(d)
        d = d.cpu().numpy()
        
    print(len(d))
    match_thresh = 0.9
    n_frames = 269
    for ii in range(0,n_frames):
        # store descriptors for last frame
        last_d = d

        # extract patches and descriptors for frame
        d = get_frame_patches(patch_fldr,ii)
        d = torch.FloatTensor(np.array(d)).unsqueeze(1)
        if args.cuda:
            d = d.cuda()
        with torch.no_grad():
            d = Variable(d)
            d = model(d)
            d = d.cpu().numpy()

        # compare to previous frame
        # brute force matching with default params
        bf = cv2.BFMatcher(cv2.NORM_L2,crossCheck=True)
        matches = bf.match(d, last_d)
        print(len(matches),'matches via brute force')
        
        # discard matches below threshold
        fff = open(str(ii) + '_matches.txt', "w")
        good = []
        for m in matches:
            if m.distance < match_thresh:
                p = str(m.distance) + "," + str(m.trainIdx) + "," + str(m.queryIdx) + "," + str(m.imgIdx) + "\n"
                fff.write(p)
                good.append(m)
        
        fff.close()
        print(len(good),'matches below threshold')
        
        # Draw matches
        # img3 = cv2.drawMatches(f,k,last_f,last_k,good,None,matchColor=(255,255,153),flags=0)
        # cv2.imwrite(str(ii)+'.png',img3)
        # write matches to file

    # distances = np.zeros((717,len(inc_list)))
    # # iterate through patches
    # for ii in range(717):
    #     d_idx_a = int(label_indices[ii,0]) # reference patch for first image
    #     desc_a = desc_xv[d_idx_a].cpu().numpy()

    #     # iterate through images
    #     for jj in range(len(inc_list)):
    #         d_idx_b = int(label_indices[ii,jj])
    #         desc_b = desc_xv[d_idx_b].cpu().numpy()

    #         # compute euclidean distance
    #         d = cv2.norm(desc_a,desc_b,cv2.NORM_L2)
    #         distances[ii,jj] = d

    # np.savetxt('positive_dists.txt', distances, delimiter=',')


    # start = args.start_epoch
    # end = start + args.epochs
    # for epoch in range(start, end):

    #     # if epoch==25:
    #     #     args.batch_reduce = 'random_global'
    #     #     print("swapping to hard negative mining",args.batch_reduce)

    #     model.eval()
        
    #     if  args.batch_hard==0:
    #         trainDatasetWithHardNegatives = TotalDatasetsLoader(train=True,
    #                         load_random_triplets=False,
    #                         batch_size=args.batch_size,
    #                         datasets_path=args.hpatches_split+"hpatches_split_a_train.pt",
    #                         fliprot=args.fliprot,
    #                         n_triplets=args.n_triplets,
    #                         batch_hard=args.batch_hard,
    #                         name=args.training_set,
    #                         download=True,
    #                         transform=transform)
            
    #         train_loader = torch.utils.data.DataLoader(trainDatasetWithHardNegatives,
    #                                                 batch_size=args.batch_size,
    #                                                 shuffle=False, **kwargs)
        
    #     else:
    #         trainDatasetWithHardNegatives = TotalDatasetsLoader(train=True,
    #                      load_random_triplets=False,
    #                      batch_size=args.batch_size,
    #                      datasets_path=args.hpatches_split+"hpatches_split_a_train.pt",
    #                      fliprot=args.fliprot,
    #                      n_triplets=args.n_triplets,
    #                      batch_hard=args.batch_hard,
    #                      name=args.training_set,
    #                      model=model,
    #                      download=True,
    #                      transform=transform)
    #         train_loader = torch.utils.data.DataLoader(trainDatasetWithHardNegatives,
    #                                                 batch_size=args.batch_size,
    #                                                 shuffle=False, **kwargs)



    #     train_loss_epch = train(train_loader, model, optimizer1, epoch, logger)
    #     train_losses_arr.append(train_loss_epch)

    #     # # iterate over test loaders and test results
    #     # #train_loader, test_loaders2 = create_loaders(load_random_triplets=triplet_flag)
    #     # train(train_loader, model, optimizer1, epoch, logger, triplet_flag)

    #     # # visualise 
    #     # test on deepblue set
    #     test_loss_epch, fpr95_epch = test(test_loader, model, epoch, logger,"a_test_log", xt, yt, xv, xv_ref, yv_p, yv_i, xts, xts_ref, yts_p, yts_i)
    #     test_losses_arr.append(test_loss_epch)
    #     test_fpr95_arr.append(fpr95_epch)

    #     # if TEST_ON_W1BS:
    #     #     # print(weights_path)
    #     #     patch_images = w1bs.get_list_of_patch_images(
    #     #         DATASET_DIR=args.w1bsroot.replace('/code', '/data/W1BS'))
    #     #     desc_name = 'curr_desc'  # + str(random.randint(0,100))

    #     #     DESCS_DIR = LOG_DIR + '/temp_descs/'  # args.w1bsroot.replace('/code', "/data/out_descriptors")
    #     #     OUT_DIR = DESCS_DIR.replace('/temp_descs/', "/out_graphs/")

    #     #     for img_fname in patch_images:
    #     #         w1bs_extract_descs_and_save(img_fname, model, desc_name, cuda=args.cuda,
    #     #                                     mean_img=args.mean_image,
    #     #                                     std_img=args.std_image, out_dir=DESCS_DIR)

    #     #     force_rewrite_list = [desc_name]
    #     #     w1bs.match_descriptors_and_save_results(DESC_DIR=DESCS_DIR, do_rewrite=True,
    #     #                                             dist_dict={},
    #     #                                             force_rewrite_list=force_rewrite_list)
    #     #     if (args.enable_logging):
    #     #         w1bs.draw_and_save_plots_with_loggers(DESC_DIR=DESCS_DIR, OUT_DIR=OUT_DIR,
    #     #                                               methods=["SNN_ratio"],
    #     #                                               descs_to_draw=[desc_name],
    #     #                                               logger=file_logger,
    #     #                                               tensor_logger=logger)
    #     #     else:
    #     #         w1bs.draw_and_save_plots(DESC_DIR=DESCS_DIR, OUT_DIR=OUT_DIR,
    #     #                                  methods=["SNN_ratio"],
    #     #                                  descs_to_draw=[desc_name])

    # # plot losses
    # epchs = range(1, len(test_losses_arr) + 1)
    # plt.figure(figsize=(7,4))
    # plt.plot(epchs, test_fpr95_arr)
    # plt.xlabel('Epochs')
    # plt.ylabel('FPR(95)')
    # savestr = 'frp95_plot.png'
    # plt.savefig(savestr, bbox_inches='tight')
    # plt.close()

    # plt.figure(figsize=(7,4))
    # plt.plot(epchs, train_losses_arr, label='Milk subset (train)')
    # plt.plot(epchs, test_losses_arr, label='DeepBlue subset (validation)')
    # plt.xlabel('Epochs')
    # plt.ylabel('Loss')
    # plt.legend()
    # savestr = 'losses_plot.png'
    # plt.savefig(savestr, bbox_inches='tight')
    # plt.close()

    # # save fpr data to file
    # savestr = 'fpr95_test_data.txt'
    # np.savetxt(savestr, test_fpr95_arr, delimiter=',') 

    # torch.cuda.empty_cache()

if __name__ == '__main__':
    LOG_DIR = args.log_dir
    if not os.path.isdir(LOG_DIR):
        os.makedirs(LOG_DIR)
    LOG_DIR = os.path.join(args.log_dir, suffix)
    DESCS_DIR = os.path.join(LOG_DIR, 'temp_descs')
    if TEST_ON_W1BS:
        if not os.path.isdir(DESCS_DIR):
            os.makedirs(DESCS_DIR)
    logger, file_logger = None, None
    model = HardNet()
    # model_weights = '/content/hardnet/pretrained/pretrained_all_datasets/HardNet++.pth'
    # model_weights = '/content/hardnet/pretrained/6Brown/hardnetBr6.pth'
    model_weights = '/content/hardnet/pretrained/checkpoint_8.pth'
    checkpoint = torch.load(model_weights)
    model.load_state_dict(checkpoint['state_dict'])
    
    if (args.enable_logging):
        from Loggers import Logger, FileLogger
        logger = Logger(LOG_DIR)
        # file_logger = FileLogger(./log/+suffix)
    # train_loader, test_loader = create_loaders(load_random_triplets=triplet_flag)
    # main(train_loader, test_loader, model, logger, file_logger)

    train_loader, test_loader = create_loaders(load_random_triplets=triplet_flag)
    main(train_loader, test_loader, model, logger, file_logger)